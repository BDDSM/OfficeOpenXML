
// Функция - Новый документ OOXML
//
// Параметры:
//  ИмяМакета	 - Строка - Наименование общего макета
//  ДанныеПечати - Структура - Строковые представления данных для печати
// 
// Возвращаемое значение:
//   - Структура
//		* АдресВоВременномХранилище - Строка - 
//
Функция НовыйДокументOOXML(ИмяМакета, ДанныеПечати) Экспорт  
	
	МакетИДанныеОбъекта = ДвоичныеДанныеМакета(ИмяМакета);
				
	Возврат Новый Структура("АдресВоВременномХранилище",
		СформироватьДокументЧерезФорматOOXML(МакетИДанныеОбъекта, ИмяМакета, ДанныеПечати)); 
	
КонецФункции

Функция СформироватьДокументЧерезФорматOOXML(МакетИДанныеОбъекта, ИмяМакета, ДанныеПечати)
	
	ДвоичныеДанныеМакета	= МакетИДанныеОбъекта.Макеты.ДвоичныеДанныеМакета;
	
	Макет = МакетИзДвоичныхДанных(ДвоичныеДанныеМакета[ИмяМакета]);
	Если Макет = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ПечатнаяФорма = ИнициализироватьПечатнуюФорму(Макет);
	
	Если ПечатнаяФорма = Неопределено Тогда
		ОчиститьСсылки(Макет);
		Возврат "";
	КонецЕсли;
		
	Если ИмяМакета = "ПФ_DOC_Макет" Тогда
		Возврат НовыйПечатныйДокумент_ПФ_DOC_Макет(Макет, ОбластиМакета_ПФ_DOC_Макет(), ДвоичныеДанныеМакета, ПечатнаяФорма ,ДанныеПечати);	
	ИначеЕсли ИмяМакета = "ПФ_DOC_МакетВторой" Тогда	
		Возврат НовыйПечатныйДокумент_ПФ_DOC_МакетВторой(Макет, ОбластиМакета_ПФ_DOC_МакетВторой(), ДвоичныеДанныеМакета, ПечатнаяФорма ,ДанныеПечати);
	Иначе
		Возврат "";
	КонецЕсли
	
КонецФункции

#Область НовыйПечатныйДокумент_ПФ_DOC_Макет

Функция НовыйПечатныйДокумент_ПФ_DOC_Макет(Макет, Области, ДвоичныеДанныеМакета, ПечатнаяФорма, ДанныеПечати)

	Попытка
		
		Область = ОбластьМакета(Макет, Области.Заголовок);
		ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеПечати, Ложь);
		
		Область = ОбластьМакета(Макет, Области.ОсновнойТекст);
		ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеПечати, Ложь);
		
		Область = ОбластьМакета(Макет, Области.ВерхнийКолонтитул);
		ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеПечати, Ложь);
		
		Область = ОбластьМакета(Макет, Области.ШапкаТаблицыТовары);
		ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
		
		Область = ОбластьМакета(Макет, Области.СтрокаТаблицаТовары);
		ПрисоединитьОбластьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеПечати.СтрокаТаблицаТовары, Ложь);
		
		Область = ОбластьМакета(Макет, Области.Подпись);
		ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеПечати, Ложь);
	
		АдресХранилищаПечатнойФормы = СформироватьДокумент(ПечатнаяФорма);
		
	Исключение		
		СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗакрытьОкноПечатнойФормы = Истина;
		Возврат "";		
	КонецПопытки;
	
	ОчиститьСсылки(ПечатнаяФорма, ЗакрытьОкноПечатнойФормы);
	ОчиститьСсылки(Макет);
	
	Возврат АдресХранилищаПечатнойФормы;
	
КонецФункции	

Функция ОбластиМакета_ПФ_DOC_Макет()
	
	ОписаниеОбластей = Новый Структура;
	
	ДобавитьОписаниеОбласти(ОписаниеОбластей, "Заголовок",			"Общая");
	ДобавитьОписаниеОбласти(ОписаниеОбластей, "ОсновнойТекст",		"Общая");
	ДобавитьОписаниеОбласти(ОписаниеОбластей, "Подпись",			"Общая");
	ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТаблицыТовары", "Общая");
	ДобавитьОписаниеОбласти(ОписаниеОбластей, "СтрокаТаблицаТовары","СтрокаТаблицы");
	ДобавитьОписаниеОбласти(ОписаниеОбластей, "ВерхнийКолонтитул",  "ВерхнийКолонтитул");
	Возврат ОписаниеОбластей;
	
КонецФункции

#КонецОбласти

#Область НовыйПечатныйДокумент_ПФ_DOC_МакетВторой

Функция НовыйПечатныйДокумент_ПФ_DOC_МакетВторой(Макет, Области, ДвоичныеДанныеМакета, ПечатнаяФорма, ДанныеПечати)

	Попытка
		
		Область = ОбластьМакета(Макет, Области.Заголовок);
		ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеПечати, Ложь);
		
		Область = ОбластьМакета(Макет, Области.ОсновнойТекст);
		ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеПечати, Ложь);
		
		Область = ОбластьМакета(Макет, Области.ВерхнийКолонтитул);
		ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеПечати, Ложь);
		
		АдресХранилищаПечатнойФормы = СформироватьДокумент(ПечатнаяФорма);
		
	Исключение		
		СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗакрытьОкноПечатнойФормы = Истина;
		Возврат "";		
	КонецПопытки;
	
	ОчиститьСсылки(ПечатнаяФорма, ЗакрытьОкноПечатнойФормы);
	ОчиститьСсылки(Макет);
	
	Возврат АдресХранилищаПечатнойФормы;
	
КонецФункции	

Функция ОбластиМакета_ПФ_DOC_МакетВторой()
	
	ОписаниеОбластей = Новый Структура;
	
	ДобавитьОписаниеОбласти(ОписаниеОбластей, "Заголовок",			"Общая");
	ДобавитьОписаниеОбласти(ОписаниеОбластей, "ОсновнойТекст",		"Общая");
	ДобавитьОписаниеОбласти(ОписаниеОбластей, "ВерхнийКолонтитул",  "ВерхнийКолонтитул");
	Возврат ОписаниеОбластей;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СформироватьДокумент(Знач ПечатнаяФорма) 
	
	КоличествоОбластей = ПечатнаяФорма.СтруктураДокумента.ПрисоединенныеОбласти.Количество();
	
	Если КоличествоОбластей = 0 Тогда
		УдалитьФайлы(ПечатнаяФорма.ИмяКаталога);
		Возврат Неопределено;
	КонецЕсли;
	
	ПутьКДокументу = СобратьФайлДокументаDOCX(ПечатнаяФорма);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКДокументу);
	
	АдресХранилищаПечатнойФормы = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ПутьКДокументу);
	УдалитьФайлы(ПечатнаяФорма.ИмяКаталога);
	
	Возврат АдресХранилищаПечатнойФормы;
	
КонецФункции

Функция СобратьФайлДокументаDOCX(ПечатнаяФорма)
	
	ИзменяемыеФайлы = Новый Соответствие;
	ИзменяемыеФайлы.Вставить("СвязиКонтента", ПечатнаяФорма.ИмяКаталога + УстановитьРазделительПути("\word\_rels\document.xml.rels"));
	ИзменяемыеФайлы.Вставить("ТипыКонтента",  ПечатнаяФорма.ИмяКаталога + УстановитьРазделительПути("\[Content_Types].xml"));
	ИзменяемыеФайлы.Вставить("Документ",      ПечатнаяФорма.ИмяКаталога + УстановитьРазделительПути("\word\document.xml"));
	
	// Удаляем файлы пустых колонтитулов
	КолонтитулВыведен = Новый Соответствие;
	
	Для Каждого Раздел Из ПечатнаяФорма.СтруктураДокумента.Разделы Цикл
		
		Для Каждого ЭлементКолонтитула Из Раздел.Значение.Колонтитулы Цикл
			
			Колонтитул = ЭлементКолонтитула.Значение;
			
			ИмяФайла = ПечатнаяФорма.ИмяКаталога + УстановитьРазделительПути("\word\") + Колонтитул.ИмяВнутр + ".xml";
			Если ПустаяСтрока(Колонтитул.Текст) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписьXML = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8);
			ЗаписьXML.Записать(Колонтитул.Текст);
			ЗаписьXML.Закрыть();
			
			КолонтитулВыведен.Вставить(ЭлементКолонтитула.Ключ, ИСТИНА);
			
		КонецЦикла;
		
	КонецЦикла;
	
	МассивФайловКолонтитулов = Новый Массив;
	
	Для Каждого ЭлементКолонтитула Из ПечатнаяФорма.СтруктураДокумента.Колонтитулы Цикл
		
		Если КолонтитулВыведен.Получить(ЭлементКолонтитула.Ключ) = ИСТИНА Тогда
			Продолжить;
		КонецЕсли;
		
		Колонтитул = ЭлементКолонтитула.Значение;
		Колонтитул.Текст = "";
		
		ИмяФайла = ПечатнаяФорма.ИмяКаталога + УстановитьРазделительПути("\word\") + Колонтитул.ИмяВнутр + ".xml";
		УдалитьФайлы(ИмяФайла);
		МассивФайловКолонтитулов.Добавить(Колонтитул.ИмяВнутр);
		
	КонецЦикла;
	
	// Обрабатываем связи контента
	
	ЧтениеXML = ИнициализироватьЧтениеXML(ПечатнаяФорма.СтруктураДокумента.СвязиКонтента);
	ЗаписьXML = ИнициализироватьЗаписьXML("", ИзменяемыеФайлы.Получить("СвязиКонтента"));
	
	ПропуститьТэг    = Ложь;
	ПродолжитьЧтение = Истина;
	
	Пока Истина Цикл
		
		Если ПропуститьТэг Тогда
			ЧтениеXML.Пропустить();
			ПродолжитьЧтение = ЧтениеXML.Прочитать();
			ПропуститьТэг = Ложь;
		Иначе
			ПродолжитьЧтение = ЧтениеXML.Прочитать();
		КонецЕсли;
		
		Если НЕ ПродолжитьЧтение Тогда
			Прервать;
		КонецЕсли;
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Relationship" Тогда
			
			ЗначениеАтрибута = ЧтениеXML.ПолучитьАтрибут("Target");
			
			Для Каждого ИмяФайлаКолонтитула Из МассивФайловКолонтитулов Цикл
				
				Если СтрНайти(ЗначениеАтрибута, ИмяФайлаКолонтитула) > 0 Тогда
					ПропуститьТэг = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ПропуститьТэг Тогда
			ЗаписатьЭлементXML(ЧтениеXML, ЗаписьXML);
		КонецЕсли;
		
	КонецЦикла;
	
	ПечатнаяФорма.СтруктураДокумента.СвязиКонтента = ЗаписьXML.Закрыть(); 
	
	// Обрабатываем типы контента
	
	ЧтениеXML = ИнициализироватьЧтениеXML(ПечатнаяФорма.СтруктураДокумента.ТипыКонтента);
	ЗаписьXML = ИнициализироватьЗаписьXML("", ИзменяемыеФайлы.Получить("ТипыКонтента"));
	
	ПропуститьТэг    = Ложь;
	ПродолжитьЧтение = Истина;
	
	Пока Истина Цикл
		
		Если ПропуститьТэг Тогда
			ЧтениеXML.Пропустить();
			ПродолжитьЧтение = ЧтениеXML.Прочитать();
			ПропуститьТэг = Ложь;
		Иначе
			ПродолжитьЧтение = ЧтениеXML.Прочитать();
		КонецЕсли;
		
		Если НЕ ПродолжитьЧтение Тогда
			Прервать;
		КонецЕсли;
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Override" Тогда
			
			ЗначениеАтрибута = ЧтениеXML.ПолучитьАтрибут("PartName");
			
			Для Каждого ИмяФайлаКолонтитула Из МассивФайловКолонтитулов Цикл
				
				Если СтрНайти(ЗначениеАтрибута, ИмяФайлаКолонтитула) > 0 Тогда
					ПропуститьТэг = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ПропуститьТэг Тогда
			ЗаписатьЭлементXML(ЧтениеXML, ЗаписьXML);
		КонецЕсли;
		
	КонецЦикла;
	
	ПечатнаяФорма.СтруктураДокумента.ТипыКонтента = ЗаписьXML.Закрыть(); 
	
	// Формирование документа печатной формы
	
	ПорядковыйНомер = 1;
	
	ЗаписьXML = ИнициализироватьЗаписьXML("", ИзменяемыеФайлы.Получить("Документ"));
	
	НомерРаздела           = Неопределено;
	КоличествоОбластей     = ПечатнаяФорма.СтруктураДокумента.ПрисоединенныеОбласти.Количество();
	ИдентификаторДокумента = ПечатнаяФорма.СтруктураДокумента.ИдентификаторДокумента;
	
	Для Каждого Область Из ПечатнаяФорма.СтруктураДокумента.ПрисоединенныеОбласти Цикл
		
		Если Область.НомерРаздела = 0 Тогда
			Область.НомерРаздела = ?(НомерРаздела = Неопределено, 1, НомерРаздела);
		КонецЕсли;
		
		ВывестиПромежуточныйРаздел = ?(НомерРаздела <> Неопределено И НомерРаздела <> Область.НомерРаздела, Истина, Ложь);
		
		ЭтоПоследняяОбласть = ?(ПорядковыйНомер = КоличествоОбластей, Истина, Ложь);
		
		// Запись промежуточного раздела
		
		Если ВывестиПромежуточныйРаздел = Истина И ЭтоПоследняяОбласть = Ложь Тогда
			
			РазделКВыводу = ПечатнаяФорма.СтруктураДокумента.Разделы.Получить(НомерРаздела);
			
			Если РазделКВыводу <> Неопределено Тогда
				
				ТекстРаздела = ОбработатьРазделДокумента(ПечатнаяФорма.СтруктураДокумента, РазделКВыводу);
				
				ТэгОткрытияРаздела = "<w:p w:rsidR=""" + ИдентификаторДокумента + """ w:rsidRDefault=""" + ИдентификаторДокумента + """><w:pPr>";
				ТэгЗакрытияРаздела = "</w:pPr></w:p>";
				ТекстРаздела = ТэгОткрытияРаздела + ТекстРаздела + ТэгЗакрытияРаздела;
				ЗаписьXML.ЗаписатьБезОбработки(ТекстРаздела);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Запись тела
		
		ЧтениеXML = ИнициализироватьЧтениеXML(Область.Текст);
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "w:body" Тогда
				Прервать;
			КонецЕсли;
			
			Если ПорядковыйНомер > 1 Тогда
				
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И (ЧтениеXML.Имя = "w:document" Или ЧтениеXML.Имя = "w:body") Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			ЗаписатьЭлементXML(ЧтениеXML, ЗаписьXML);
			
		КонецЦикла;
		
		// Запись заключительного раздела
		
		Если ЭтоПоследняяОбласть Тогда
			
			РазделКВыводу = ПечатнаяФорма.СтруктураДокумента.Разделы.Получить(Область.НомерРаздела);
			Если РазделКВыводу <> Неопределено Тогда
				ТекстРаздела = ОбработатьРазделДокумента(ПечатнаяФорма.СтруктураДокумента, РазделКВыводу);
				ЗаписьXML.ЗаписатьБезОбработки(ТекстРаздела);
			КонецЕсли;
			
		КонецЕсли;
		
		ПорядковыйНомер = ПорядковыйНомер + 1;
		НомерРаздела = Область.НомерРаздела;
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // Закрытие тэга </w:body>
	ЗаписьXML.ЗаписатьКонецЭлемента(); // Закрытие тэга </w:document>
	
	ЗаписьXML.Закрыть();
	
	ПутьКДокументу = ПолучитьИмяВременногоФайла("DOCX");
	
	СобратьКонтейнерДокументаDOCX(ПутьКДокументу, ПечатнаяФорма.ИмяКаталога);
	
	Возврат ПутьКДокументу;
	
КонецФункции

Процедура СобратьКонтейнерДокументаDOCX(Знач ПолноеИмяФайла, Знач ПутьКСтруктуреФайла)
	
	Попытка
		Архиватор = Новый ЗаписьZipФайла(ПолноеИмяФайла);
	Исключение
		ЗаписатьСобытияВЖурналРегистрации(СобытиеЖурналаРегистрации(), "Ошибка", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение(НСтр("ru = 'Не удалось создать файл документа по причине:'") + Символы.ПС 
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	МаскаУпаковкиФайлов = ДобавитьКонечныйРазделительПути(ПутьКСтруктуреФайла) + "*";
	
	Попытка
		Архиватор.Добавить(МаскаУпаковкиФайлов, РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
		Архиватор.Записать();
	Исключение
		ЗаписатьСобытияВЖурналРегистрации(СобытиеЖурналаРегистрации(), "Ошибка", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение(НСтр("ru = 'Не удалось сформировать файл документа по причине:'") + Символы.ПС 
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	ДвоичныеДанный = Новый ДвоичныеДанные(ПолноеИмяФайла);
	ЧтениеДанных   = Новый ЧтениеДанных(ДвоичныеДанный);
	
	ЗаписьДанных = Новый ЗаписьДанных(ПолноеИмяФайла);
	ЗаписьДанных.ЗаписатьБайт(ЧтениеДанных.ПрочитатьБайт());
	ЗаписьДанных.ЗаписатьБайт(ЧтениеДанных.ПрочитатьБайт());
	ЗаписьДанных.ЗаписатьБайт(ЧтениеДанных.ПрочитатьБайт());
	ЗаписьДанных.ЗаписатьБайт(ЧтениеДанных.ПрочитатьБайт());
	ЗаписьДанных.ЗаписатьБайт(ЧтениеДанных.ПрочитатьБайт());
	ЗаписьДанных.ЗаписатьБайт(0);
	ЗаписьДанных.ЗаписатьБайт(6);
	ЗаписьДанных.ЗаписатьБайт(0);
	
	ЧтениеДанных.ПрочитатьБайт();
	ЧтениеДанных.ПрочитатьБайт();
	ЧтениеДанных.ПрочитатьБайт();
	
	РезультатЧтенияДанных = ЧтениеДанных.Прочитать();
	
	ЗаписьДанных.Записать(РезультатЧтенияДанных.ПолучитьДвоичныеДанные());
	ЗаписьДанных.Закрыть();
	
КонецПроцедуры

Процедура СообщитьПользователю( 
	Знач ТекстСообщенияПользователю,
	Знач КлючДанных = Неопределено,
	Знач Поле = "",
	Знач ПутьКДанным = "",
	Отказ = Ложь) 
	
	ЭтоОбъект = Ложь;
	
	Если КлючДанных <> Неопределено
		И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = СтрНайти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
	
	ОНСКС_СообщитьПользователю(
		ТекстСообщенияПользователю,
		КлючДанных,
		Поле,
		ПутьКДанным,
		Отказ,
		ЭтоОбъект);
	
КонецПроцедуры

Процедура ОНСКС_СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных,
		Знач Поле,
		Знач ПутьКДанным = "",
		Отказ = Ложь,
		ЭтоОбъект = Ложь) 
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
	
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

Функция ДвоичныеДанныеМакета(ИмяМакета)
	
	ДвоичныеДанныеМакета = Новый Соответствие;
	
	Попытка
		ДвоичныеДанные = ПолучитьОбщийМакет(ИмяМакета); 
	Исключение
		ДвоичныеДанные = Неопределено;
	КонецПопытки;
	
	ДвоичныеДанныеМакета.Вставить(ИмяМакета, ДвоичныеДанные);
	
	Макеты = Новый Структура("ДвоичныеДанныеМакета");
	Макеты.ДвоичныеДанныеМакета = ДвоичныеДанныеМакета;
	
	Возврат Новый Структура("Макеты", Макеты);
			
КонецФункции

Процедура ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, ОбластьМакета, Данные, Знач ПереходНаСледующуюСтроку = Ложь) 
	
	Если ОбластьМакета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПрисоединитьОбласть(ПечатнаяФорма, ОбластьМакета, ПереходНаСледующуюСтроку);
	ЗаполнитьПараметры(ПечатнаяФорма, Данные);
	
КонецПроцедуры

Процедура ПрисоединитьОбластьИЗаполнитьКоллекцию(ПечатнаяФорма, ОбластьМакета, Данные, Знач ПереходНаСледСтроку = Ложь) 
	
	Если ОбластьМакета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОбласти = ОбластьМакета.ОписаниеОбласти;
	
	Если ОписаниеОбласти.ТипОбласти = "СтрокаТаблицы" ИЛИ ОписаниеОбласти.ТипОбласти = "Список" Тогда
		ПрисоединитьИЗаполнитьНабор(ПечатнаяФорма, ОбластьМакета, Данные, ПереходНаСледСтроку);
	Иначе
		ВызватьИсключение ТекстТипОбластиУказанНекорректно();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрисоединитьИЗаполнитьНабор(ПечатнаяФорма, ОбластьМакета, ДанныеОбъекта = Неопределено,
	Знач ПереходНаСледСтроку = Ложь) 
	
	Если НЕ ТипЗнч(ДанныеОбъекта) = Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеОбъекта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДанныеСтроки Из ДанныеОбъекта Цикл
		
		Если НЕ ТипЗнч(ДанныеСтроки) = Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		Область = Ф_ПрисоединитьОбласть(ПечатнаяФорма, ОбластьМакета);
		УПС_ЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеСтроки);
		
	КонецЦикла;
	
	Если ПереходНаСледСтроку Тогда
		ВставитьРазрывНаНовуюСтроку(ПечатнаяФорма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрисоединитьОбласть(ПечатнаяФорма, ОбластьМакета, Знач ПереходНаСледующуюСтроку = Ложь) 
	
	Если ОбластьМакета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ОписаниеОбласти = ОбластьМакета.ОписаниеОбласти;
	
		ВыведеннаяОбласть = Неопределено;
		
		Если ОписаниеОбласти.ТипОбласти = "ВерхнийКолонтитул" ИЛИ ОписаниеОбласти.ТипОбласти = "ВерхнийЧетныйКолонтитул" ИЛИ ОписаниеОбласти.ТипОбласти = "ВерхнийТитульныйКолонтитул" Тогда
				ВыведеннаяОбласть = ДобавитьВерхнийКолонтитул(ПечатнаяФорма, ОбластьМакета);
		ИначеЕсли ОписаниеОбласти.ТипОбласти = "НижнийКолонтитул"  ИЛИ ОписаниеОбласти.ТипОбласти = "НижнийЧетныйКолонтитул"  ИЛИ ОписаниеОбласти.ТипОбласти = "НижнийТитульныйКолонтитул" Тогда
			ВыведеннаяОбласть = ДобавитьНижнийКолонтитул(ПечатнаяФорма, ОбластьМакета);
		ИначеЕсли ОписаниеОбласти.ТипОбласти = "Общая" Тогда
			ВыведеннаяОбласть = Ф_ПрисоединитьОбласть(ПечатнаяФорма, ОбластьМакета, ПереходНаСледующуюСтроку);
		ИначеЕсли ОписаниеОбласти.ТипОбласти = "Список" ИЛИ ОписаниеОбласти.ТипОбласти = "СтрокаТаблицы" Тогда
			ВыведеннаяОбласть = Ф_ПрисоединитьОбласть(ПечатнаяФорма, ОбластьМакета, ПереходНаСледующуюСтроку);
		Иначе
			ВызватьИсключение ТекстТипОбластиУказанНекорректно();
		КонецЕсли;
		
		ОписаниеОбласти.Вставить("Область", ВыведеннаяОбласть);
		ОписаниеОбласти.Вставить("ПереходНаСледующуюСтроку", ПереходНаСледующуюСтроку);
		
		// Содержит тип области, и границы области (если требуется).
		ПечатнаяФорма.ПоследняяВыведеннаяОбласть = ОписаниеОбласти;
		
	Исключение
		СообщениеОбОшибке = СокрЛП(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		СообщениеОбОшибке = ?(Прав(СообщениеОбОшибке, 1) = ".", СообщениеОбОшибке, СообщениеОбОшибке + ".");
		СообщениеОбОшибке = СообщениеОбОшибке + " " + ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при попытке вывести область ""%1"" из макета.'"),
			ОбластьМакета.ОписаниеОбласти.ИмяОбласти);
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
КонецПроцедуры

Функция Ф_ПрисоединитьОбласть(ПечатнаяФорма, ОбластьМакета, Знач ПереходНаСледСтроку = Ложь) 
	
	ДобавитьВСтруктуруДокументаОбластьДокумента(ПечатнаяФорма.СтруктураДокумента, ОбластьМакета);
	СтруктураОбласти = ПрисоединитьКСтруктуреДокументаОбластьДокумента(ПечатнаяФорма.СтруктураДокумента, ОбластьМакета);
	
	Если ПереходНаСледСтроку Тогда
		ВставитьРазрывНаНовуюСтроку(ПечатнаяФорма);
	КонецЕсли;
	
	Возврат СтруктураОбласти;
	
КонецФункции

Процедура ВставитьРазрывНаНовуюСтроку(ПечатнаяФорма) 
	
	Абзац = ПечатнаяФорма.СтруктураДокумента.ОбластиДокумента.Получить("Абзац");
	
	Если Абзац <> Неопределено Тогда
		
		Абзац.НомерРаздела = 1;
		
		Количество = ПечатнаяФорма.СтруктураДокумента.ПрисоединенныеОбласти.Количество();
		
		Если Количество <> 0 Тогда
			Абзац.НомерРаздела = ПечатнаяФорма.СтруктураДокумента.ПрисоединенныеОбласти[Количество - 1].НомерРаздела;
		КонецЕсли;
		
		ПрисоединитьОбласть(ПечатнаяФорма, Абзац, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьВерхнийКолонтитул(ПечатнаяФорма, ВерхнийКолонтитул) 
	
	ДобавитьВСтруктуруДокументаКолонтитул(ПечатнаяФорма.СтруктураДокумента, ВерхнийКолонтитул);
	СтруктураКолонтитула = ПрисоединитьКСтруктуреДокументаКолонтитул(ПечатнаяФорма.СтруктураДокумента, ВерхнийКолонтитул);
	
	Возврат СтруктураКолонтитула;
	
КонецФункции

Функция ДобавитьНижнийКолонтитул(ПечатнаяФорма, НижнийКолонтитул) 
	
	ДобавитьВСтруктуруДокументаКолонтитул(ПечатнаяФорма.СтруктураДокумента, НижнийКолонтитул);
	СтруктураКолонтитула = ПрисоединитьКСтруктуреДокументаКолонтитул(ПечатнаяФорма.СтруктураДокумента, НижнийКолонтитул);
	
	Возврат СтруктураКолонтитула;
	
КонецФункции

Функция ТекстТипОбластиУказанНекорректно()
	Возврат НСтр("ru = 'Тип области не указан или указан некорректно.'");
КонецФункции

Процедура ЗаполнитьПараметры(ПечатнаяФорма, Данные) 
	
	ОписаниеОбласти = ПечатнаяФорма.ПоследняяВыведеннаяОбласть; // см. ОбластьМакета.ОписаниеОбласти
	
	Если ОписаниеОбласти.ТипОбласти = "ВерхнийКолонтитул" ИЛИ ОписаниеОбласти.ТипОбласти = "ВерхнийЧетныйКолонтитул" ИЛИ ОписаниеОбласти.ТипОбласти = "ВерхнийТитульныйКолонтитул" Тогда
		ЗаполнитьПараметрыВерхнегоКолонтитула(ПечатнаяФорма, ОписаниеОбласти.Область, Данные);
	ИначеЕсли ОписаниеОбласти.ТипОбласти = "НижнийКолонтитул"  ИЛИ ОписаниеОбласти.ТипОбласти = "НижнийЧетныйКолонтитул"  ИЛИ ОписаниеОбласти.ТипОбласти = "НижнийТитульныйКолонтитул" Тогда
		ЗаполнитьПараметрыНижнегоКолонтитула(ПечатнаяФорма, ОписаниеОбласти.Область, Данные);
	ИначеЕсли ОписаниеОбласти.ТипОбласти = "Общая"
			ИЛИ ОписаниеОбласти.ТипОбласти = "СтрокаТаблицы"
			ИЛИ ОписаниеОбласти.ТипОбласти = "Список" Тогда
		УПС_ЗаполнитьПараметры(ПечатнаяФорма, ОписаниеОбласти.Область, Данные);
	Иначе
		ВызватьИсключение ТекстТипОбластиУказанНекорректно();
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПараметрыНижнегоКолонтитула(ПечатнаяФорма, НижнийКолонтитул, ДанныеОбъекта = Неопределено) 
	
	Если НЕ ТипЗнч(ДанныеОбъекта) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПараметрыОбласти(ПечатнаяФорма, НижнийКолонтитул, ДанныеОбъекта);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыОбласти(ПечатнаяФорма, Область, ДанныеОбъекта)
	
	ОбработатьТекст = ЛОЖЬ;
	СтруктураРазбораXML = ИнициализироватьРазборXML();
	
	ОткрытаТаблица       = Ложь; 
	ОткрытаКлеткаТаблицы = Ложь;
	
	ШиринаТаблицы         = 0;
	ШиринаКлеткиТаблицы   = 0;
	
	РазрешениеОсновногоЭкрана = 72;
	
	ЧтениеXML = ИнициализироватьЧтениеXML(Область.Текст);
	ИнициализироватьЗаписьВПоток(СтруктураРазбораXML, "Область", "");
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеНачалаТекстаСтроки(СтруктураРазбораXML, ЧтениеXML) Тогда
			ОбработатьТекст = ИСТИНА;
		КонецЕсли;
		
		Если ЧтениеКонцаТекстаСтроки(СтруктураРазбораXML, ЧтениеXML) Тогда
			ОбработатьТекст = ЛОЖЬ;
		КонецЕсли;
		
		Если ЧтениеНачалаТаблицы(СтруктураРазбораXML, ЧтениеXML) Тогда
			ОткрытаТаблица = Истина;
		КонецЕсли;
		
		Если ОткрытаТаблица И ЧтениеНачалаШириныТаблицы(СтруктураРазбораXML, ЧтениеXML) Тогда
			УстановитьШиринуПоля(ЧтениеXML, ШиринаТаблицы);
		КонецЕсли;
		
		Если ОткрытаТаблица И ЧтениеНачалаКлеткиТаблицы(СтруктураРазбораXML, ЧтениеXML) Тогда
			ОткрытаКлеткаТаблицы = Истина;
		КонецЕсли;
		
		Если ОткрытаКлеткаТаблицы И ЧтениеНачалаШириныКлеткиТаблицы(СтруктураРазбораXML, ЧтениеXML) Тогда
			УстановитьШиринуПоля(ЧтениеXML, ШиринаКлеткиТаблицы, ШиринаТаблицы);
		КонецЕсли;
		
		Если ЧтениеКонцаКлеткиТаблицы(СтруктураРазбораXML, ЧтениеXML) Тогда
			ОткрытаКлеткаТаблицы = Ложь;
			ШиринаКлеткиТаблицы  = 0;
		КонецЕсли;
		
		Если ЧтениеКонцаТаблицы(СтруктураРазбораXML, ЧтениеXML) Тогда
			ОткрытаТаблица = Ложь;
			ШиринаТаблицы  = 0;
		КонецЕсли;
			
		Если ОбработатьТекст И ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			ТекстУзла = ЧтениеXML.Значение;
			
			ПараметрыИзТекста = Новый Массив;
			
			ВыделитьПараметры(ПараметрыИзТекста, ТекстУзла);
			
			ВыводТекста = Истина;
			ВыводКартинки = Ложь;
			ЗначениеПараметра = Неопределено;
			
			Для Каждого ПараметрТекст Из ПараметрыИзТекста Цикл
				
				Если ДанныеОбъекта.Свойство(ПараметрТекст, ЗначениеПараметра) Тогда
					ЗначениеПараметра = СокрЛП(ЗначениеПараметра);
				КонецЕсли;
				
				Если ТипЗнч(ЗначениеПараметра) = Тип("Строка") И НЕ СтрНачинаетсяС(ЗначениеПараметра, "e1cib/tempstorage") Тогда
					ТекстУзла = СтрЗаменить(ТекстУзла, "{v8 " + ПараметрТекст + "}", ЗначениеПараметра);
				ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Строка") И СтрНачинаетсяС(ЗначениеПараметра, "e1cib/tempstorage") Тогда
					ТекстУзла = ЗначениеПараметра;
					ВыводТекста = Ложь;
					ВыводКартинки = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ВыводТекста Тогда
				
				ЗаписатьТекстВПотоки(СтруктураРазбораXML, ЧтениеXML, "Область", ТекстУзла);
				
			ИначеЕсли ВыводКартинки Тогда
				
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(ТекстУзла); // ДвоичныеДанные - 
				
				СтруктураКартинка = Новый Структура;
				СтруктураКартинка.Вставить("ДвоичныеДанные",     ДвоичныеДанные);
				СтруктураКартинка.Вставить("ИмяКартинки",        "image");
				СтруктураКартинка.Вставить("КаталогКартинок",    ПечатнаяФорма.СтруктураДокумента.КаталогКартинок);
				
				ПараметрыКартинки = ПолучитьАтрибутыИзображения(ДвоичныеДанные);
				
				Если ПараметрыКартинки.Количество() = 0 ИЛИ ПараметрыКартинки.ТипИзображения = Null Тогда
					ЗаписатьТекстВПотоки(СтруктураРазбораXML, ЧтениеXML, "Область", ТекстУзла);
					Продолжить;
				КонецЕсли;
				
				Если НЕ ШиринаКлеткиТаблицы = 0 Тогда
					
					ОтношениеВысотыКШирине = ПараметрыКартинки.Высота / ПараметрыКартинки.Ширина;
					
					ШиринаКартинки = ШиринаКлеткиТаблицы * 914400 / РазрешениеОсновногоЭкрана / 20;
					ВысотаКартинки = ОтношениеВысотыКШирине * ШиринаКлеткиТаблицы * 914400 / РазрешениеОсновногоЭкрана / 20;
					
				Иначе
					
					КоэффициентМасштаба = 2;
					КоэффициентПропорций = 914400 / (РазрешениеОсновногоЭкрана * КоэффициентМасштаба);
					
					ШиринаКартинки = КоэффициентПропорций * ПараметрыКартинки.Ширина;
					ВысотаКартинки = КоэффициентПропорций * ПараметрыКартинки.Высота;
					
				КонецЕсли;
				
				ШиринаКартинки = Окр(ШиринаКартинки, 0);
				ВысотаКартинки = Окр(ВысотаКартинки, 0);
				
				СтруктураКартинка.Вставить("РасширениеКартинки", СтрЗаменить(ПараметрыКартинки.ТипИзображения, "image/", ""));
				СтруктураКартинка.Вставить("ШиринаКартинки",     ШиринаКартинки);
				СтруктураКартинка.Вставить("ВысотаКартинки",     ВысотаКартинки);
				
				
				ВнестиКартинкуВБиблиотекуДокумента(ПечатнаяФорма.СтруктураДокумента, СтруктураКартинка);
				ШаблонКартинкиXML = ПолучитьШаблонКартинки();
				ПодготовитьШаблонКартинки(ШаблонКартинкиXML, СтруктураКартинка);
				ВнестиТекстКартинкиВДокумент(СтруктураРазбораXML.ПотокиЗаписи.Область.Поток, СтруктураКартинка);
				
			КонецЕсли
			
		Иначе
			ЗаписатьЭлементXMLВПоток(СтруктураРазбораXML, ЧтениеXML, ПечатнаяФорма.СтруктураДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	Область.Текст = ЗавершитьЗаписьВПоток(СтруктураРазбораXML, "Область");
	
КонецПроцедуры

Процедура ВнестиТекстКартинкиВДокумент(ЗаписьXML, СтруктураКартинка)
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // Закрывается текстовый тэг параметра w:t.
	ЗаписьXML.ЗаписатьБезОбработки(СтруктураКартинка.ТекстКартинки);
	ЗаписьXML.ЗаписатьНачалоЭлемента("w:t");
	
КонецПроцедуры

Процедура ПодготовитьШаблонКартинки(ШаблонКартинки, СтруктураКартинка)
	
	// Параметры подстановки
	// 1 - id
	// 2 - name
	// 3 - descr
	// 4 - rId
	// 5 - uri
	// 6 - cx
	// 7 - cy
	ОбработанныйШаблонКартинки = ПодставитьПараметрыВСтроку(ШаблонКартинки, 
		"0",
		СтруктураКартинка.ИмяКартинки,
		СтруктураКартинка.ИмяКартинки,
		СтруктураКартинка.rId,
		"{28A0092B-C50C-407E-A947-70E740481C1C}", 
		Формат(СтруктураКартинка.ШиринаКартинки, "ЧГ=0"),
		Формат(СтруктураКартинка.ВысотаКартинки, "ЧГ=0"));
										   
	СтруктураКартинка.Вставить("ТекстКартинки", ОбработанныйШаблонКартинки);
	
КонецПроцедуры

Функция ПолучитьШаблонКартинки()
	
	ШаблонКартинкиXML =
	"<w:drawing>
	|	<wp:inline distT=""0"" distB=""0"" distL=""0"" distR=""0"">
	|		<wp:extent cx=""%6"" cy=""%7""/>
	|		<wp:effectExtent l=""0"" t=""0"" r=""0"" b=""0""/>
	|		<wp:docPr id=""%1"" name=""%2""/>
	|		<wp:cNvGraphicFramePr>
	|			<a:graphicFrameLocks xmlns:a=""http://schemas.openxmlformats.org/drawingml/2006/main"" noChangeAspect=""1""/>
	|		</wp:cNvGraphicFramePr>
	|		<a:graphic xmlns:a=""http://schemas.openxmlformats.org/drawingml/2006/main"">
	|			<a:graphicData uri=""http://schemas.openxmlformats.org/drawingml/2006/picture"">
	|				<pic:pic xmlns:pic=""http://schemas.openxmlformats.org/drawingml/2006/picture"">
	|					<pic:nvPicPr>
	|						<pic:cNvPr id=""%1"" name=""%2"" descr=""%3""/>
	|						<pic:cNvPicPr>
	|							<a:picLocks noChangeAspect=""1"" noChangeArrowheads=""1""/>
	|						</pic:cNvPicPr>
	|					</pic:nvPicPr>
	|					<pic:blipFill>
	|						<a:blip r:embed=""%4"">
	|							<a:extLst>
	|								<a:ext uri=""%5"">
	|									<a14:useLocalDpi xmlns:a14=""http://schemas.microsoft.com/office/drawing/2010/main"" val=""0""/>
	|								</a:ext>
	|							</a:extLst>
	|						</a:blip>
	|						<a:srcRect/>
	|						<a:stretch>
	|							<a:fillRect/>
	|						</a:stretch>
	|					</pic:blipFill>
	|					<pic:spPr bwMode=""auto"">
	|						<a:xfrm>
	|							<a:off x=""0"" y=""0""/>
	|							<a:ext cx=""%6"" cy=""%7""/>
	|						</a:xfrm>
	|						<a:prstGeom prst=""rect"">
	|							<a:avLst/>
	|						</a:prstGeom>
	|						<a:noFill/>
	|						<a:ln>
	|							<a:noFill/>
	|						</a:ln>
	|					</pic:spPr>
	|				</pic:pic>
	|			</a:graphicData>
	|		</a:graphic>
	|	</wp:inline>
	|</w:drawing>";
	
	Возврат ШаблонКартинкиXML;
КонецФУнкции

Процедура ВнестиКартинкуВБиблиотекуДокумента(СтруктураДокумента, СтруктураКартинка)
	
	КаталогMedia = Новый Файл(СтруктураКартинка.КаталогКартинок);
	TypeImage = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image";
	
	Если НЕ КаталогMedia.Существует() Тогда
		СоздатьКаталог(СтруктураКартинка.КаталогКартинок);
	КонецЕсли;
	
	// Добавить строку в rels файл
	ЧтениеXML = ИнициализироватьЧтениеXML(СтруктураДокумента.СвязиКонтента);
	ЗаписьXML = ИнициализироватьЗаписьXML("");
	
	СтруктураДокумента.ТаблицаСвязейКонтента.Сортировать("НомерРесурса Возр");
	МаксНомерРесурса = СтруктураДокумента.ТаблицаСвязейКонтента[СтруктураДокумента.ТаблицаСвязейКонтента.Количество() - 1].НомерРесурса;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "Relationships" Тогда
			
			НомерРесурса = МаксНомерРесурса + 1;
			ИдРесурса    = "rId" + Формат(МаксНомерРесурса + 1, "ЧГ=0");
			ИмяКартинки  = СтруктураКартинка.ИмяКартинки + ИдРесурса;
			ИмяРесурса   = "media/" + ИмяКартинки + "." + СтруктураКартинка.РасширениеКартинки;
			
			ДобавитьСтрокуВТаблицуСвязейКонтента(СтруктураДокумента, ИмяРесурса, ИдРесурса, НомерРесурса);
			
			СтруктураКартинка.Вставить("rId", ИдРесурса);
			СтруктураКартинка.ИмяКартинки = ИмяКартинки;
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Relationship");
			ЗаписьXML.ЗаписатьАтрибут("Target", ИмяРесурса);
			ЗаписьXML.ЗаписатьАтрибут("Type",   TypeImage);
			ЗаписьXML.ЗаписатьАтрибут("Id",     ИдРесурса);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
			ЗаписатьЭлементXML(ЧтениеXML, ЗаписьXML);
			
			ДобавитьРасширениеКартинкиВТипыКонтента(СтруктураДокумента, СтруктураКартинка);
			
		Иначе
			ЗаписатьЭлементXML(ЧтениеXML, ЗаписьXML);
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	СтруктураДокумента.СвязиКонтента = ЗаписьXML.Закрыть();
	
	// Записать картинку в каталог media
	ДвоичныеДанные = СтруктураКартинка.ДвоичныеДанные;
	ДвоичныеДанные.Записать(СтруктураКартинка.КаталогКартинок + СтруктураКартинка.ИмяКартинки + "." + СтруктураКартинка.РасширениеКартинки);
	
КонецПроцедуры

Процедура ДобавитьРасширениеКартинкиВТипыКонтента(СтруктураДокумента, СтруктураКартинка)
	
	ДобавленныеРасширения = СтруктураДокумента.РасширенияКартинок;
	РасширениеКартинки    = СтруктураКартинка.РасширениеКартинки; 
	
	Если НЕ ДобавленныеРасширения.Найти(РасширениеКартинки) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЧтениеXML = ИнициализироватьЧтениеXML(СтруктураДокумента.ТипыКонтента);
	
	ЗаписьXML = ИнициализироватьЗаписьXML("");
	
	РасширениеИмеется = Ложь;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Default" Тогда
			
			ЗначениеExtension = ЧтениеXML.ЗначениеАтрибута("Extension");
			
			Если ЗначениеExtension = РасширениеКартинки Тогда
				РасширениеИмеется = Истина;
			КонецЕсли;
			
			ЗаписатьЭлементXML(ЧтениеXML, ЗаписьXML);
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "Types" Тогда
			
			Если НЕ РасширениеИмеется Тогда
			
				ЗаписьXML.ЗаписатьНачалоЭлемента("Default");
				ЗаписьXML.ЗаписатьАтрибут("ContentType", "image/" + РасширениеКартинки);
				ЗаписьXML.ЗаписатьАтрибут("Extension", РасширениеКартинки);
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
				ДобавленныеРасширения.Добавить(РасширениеКартинки);
			
			КонецЕсли;
			
			ЗаписатьЭлементXML(ЧтениеXML, ЗаписьXML);
			
		Иначе
			
			ЗаписатьЭлементXML(ЧтениеXML, ЗаписьXML);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	СтруктураДокумента.ТипыКонтента = ЗаписьXML.Закрыть();
	
КонецПроцедуры

Функция ПолучитьАтрибутыИзображения(ДанныеЧтения)
	
	АтрибутыИзображения = Новый Структура;
	
	Если ТипЗнч(ДанныеЧтения) = Тип("Строка") Тогда
		
		Попытка
			ПотокДанных = ФайловыеПотоки.ОткрытьДляЧтения(ДанныеЧтения);
		Исключение
			Возврат АтрибутыИзображения;
		КонецПопытки;
		
	ИначеЕсли ТипЗнч(ДанныеЧтения) = Тип("ДвоичныеДанные") Тогда
		ПотокДанных = ДанныеЧтения
	Иначе
		Возврат АтрибутыИзображения;
	КонецЕсли;
	
	ЧтениеДанных = Новый ЧтениеДанных(ПотокДанных);
	
	Символ1 = ЧтениеДанных.ПрочитатьБайт();
	Символ2 = ЧтениеДанных.ПрочитатьБайт();
	Символ3 = ЧтениеДанных.ПрочитатьБайт();
	
	// MIME syntax -  "type/subtype"
	MimeType = Null;
	
	Ширина  = -1;
	Высота = -1;
	
	Если (Символ(Символ1) = "G" И Символ(Символ2) = "I" И Символ(Символ3) = "F") Тогда // GIF
		
		ЧтениеДанных.Пропустить(3);
		Ширина  = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 2, Ложь);
		Высота = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 2 , Ложь);
		MimeType = "image/gif";
		
	ИначеЕсли (Символ1 = 255 И Символ2 = 216) Тогда // JPG
		
		Пока (Символ3 = 255) Цикл 
			
			Маркер = ЧтениеДанных.ПрочитатьБайт();
			Длина = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 2, Истина);
			
			Если (Маркер = 192 ИЛИ Маркер = 193 ИЛИ Маркер = 194) Тогда
				
				ЧтениеДанных.Пропустить(1);
				Высота = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 2, Истина);
				Ширина  = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 2, Истина);
				MimeType = "image/jpeg";
				Прервать;
				
			КонецЕсли;
			
			ЧтениеДанных.Пропустить(Длина - 2);
			Символ3 = ЧтениеДанных.ПрочитатьБайт();
			
		КонецЦикла;
		
	ИначеЕсли  (Символ1 = 137 И Символ2 = 80 И Символ3 = 78) Тогда // PNG
		
		ЧтениеДанных.Пропустить(15);
		Ширина = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 2 , Истина);
		ЧтениеДанных.Пропустить(2);
		Высота = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 2, Истина);
		MimeType = "image/png";
		
	ИначеЕсли  (Символ1 = 66 И Символ2 = 77) Тогда // BMP
		
		ЧтениеДанных.Пропустить(15);
		Ширина = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 2, Ложь);
		ЧтениеДанных.Пропустить(2);
		Высота = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 2, Ложь);
		MimeType = "image/bmp";
		
	Иначе
		
		Символ4 = ЧтениеДанных.ПрочитатьБайт();
		
		Если((Символ(Символ1) = "M" И Символ(Символ2) = "M" И Символ3 = 0 И Символ4 = 42) ИЛИ (Символ(Символ1) = "I" И Символ(Символ2) = "I" И Символ3 = 42 И Символ4 = 0)) Тогда //TIFF
			
			ПорядокБайтовBigEndian = Символ(Символ1) = "M";
			
			// Image header
			ImageFileDirectory = 0;
			ImageFileDirectory = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 4, ПорядокБайтовBigEndian);
			
			ЧтениеДанных.Пропустить(ImageFileDirectory - 8);
			Вхождения = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 2, ПорядокБайтовBigEndian);
			
			Индекс = 1;
			Пока Индекс <= Вхождения Цикл
				
				Тэг = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 2, ПорядокБайтовBigEndian);
				ТипПоля = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 2, ПорядокБайтовBigEndian);
				ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 4, ПорядокБайтовBigEndian);
				
				Если (ТипПоля = 3 ИЛИ ТипПоля = 8) Тогда
					
					ЗначениеСмещения = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 2, ПорядокБайтовBigEndian);
					ЧтениеДанных.Пропустить(2);
					
				Иначе
					
					ЗначениеСмещения = ПрочитатьЗначениеБайтаИзПотока(ЧтениеДанных, 4, ПорядокБайтовBigEndian);
					
				КонецЕсли;
				
				Если (Тэг = 256) Тогда
					
					Ширина = ЗначениеСмещения;
					
				ИначеЕсли (Тэг = 257) Тогда
					
					Высота = ЗначениеСмещения;
					
				КонецЕсли;
				
				Если (Ширина <> -1 И Высота <> -1) Тогда
					
					MimeType = "image/tiff";
					Прервать;
					
				КонецЕсли;
				
				Индекс = Индекс + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЧтениеДанных.Закрыть();
	
	АтрибутыИзображения.Вставить("ТипИзображения", MimeType);
	АтрибутыИзображения.Вставить("Высота", ?(MimeType = Null, 0, Высота));
	АтрибутыИзображения.Вставить("Ширина", ?(MimeType = Null, 0, Ширина));
	
	Возврат АтрибутыИзображения;
	
КонецФункции

Функция ПрочитатьЗначениеБайтаИзПотока(ПотокВвода, ЧислоБайтов, ПорядокБайтовBigEndian) 
	
	Значение = 0;
	
	ВеличинаСмещения = ?(ПорядокБайтовBigEndian = Истина, (ЧислоБайтов - 1) * 8, 0);
	Количество = ?(ПорядокБайтовBigEndian = Истина, -8, 8); 
	
	Индекс = 0;
	Пока Индекс < ЧислоБайтов Цикл
		
		Значение = ПобитовоеИли_(Значение, ПобитовыйСдвигВлево_(ПотокВвода.ПрочитатьБайт(), ВеличинаСмещения));
		ВеличинаСмещения = ВеличинаСмещения + Количество;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат Значение;
	
КонецФункции

Функция ПобитовыйСдвигВлево_(Знач Число, Смещение = 0)
	
	ДвоичноеПредставление = ПолучитьДвоичноеПредставлениеЧисла(Число);
	МассивДвоичногоЧисла  = РазобратьДвоичноеПредставление(ДвоичноеПредставление);
	
	Для Инд = 0 По Смещение - 1 Цикл
		
		Индекс = 1;
		Пока Индекс <= МассивДвоичногоЧисла.ВГраница() - Инд Цикл 
			
			МассивДвоичногоЧисла[Индекс-1] = МассивДвоичногоЧисла[Индекс];
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		МассивДвоичногоЧисла[МассивДвоичногоЧисла.ВГраница()- Инд] = "0";
		
	КонецЦикла;
	
	
	ДвоичноеПредставлениеМассиваЧисла = ПолучитьДвоичноеПредставлениеМассиваЧисла(МассивДвоичногоЧисла);	
	
	Результат = ЧислоИзДвоичнойСтроки("0b" + ДвоичноеПредставлениеМассиваЧисла);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДвоичноеПредставлениеМассиваЧисла(МассивДвоичногоЧисла)
	
	Результат = "";
	
	Для Инд = 0 По МассивДвоичногоЧисла.ВГраница() Цикл
		Результат = Результат + МассивДвоичногоЧисла[Инд];
	КонецЦикла;
	
	Возврат Результат
	
КонецФункции

Функция РазобратьДвоичноеПредставление(ДвоичноеПредставление)
	
	МассивДвоичногоЧисла = Новый Массив(СтрДлина(ДвоичноеПредставление));
	
	Для Инд = 0 По МассивДвоичногоЧисла.ВГраница() Цикл
		МассивДвоичногоЧисла[Инд] = Сред(ДвоичноеПредставление, Инд + 1, 1);
	КонецЦикла;
	
	Возврат МассивДвоичногоЧисла;
	
КонецФункции

Функция ПобитовоеИли_(Число1, Число2)
	
	ДвоичноеПредставлениеЧисла1 = ПолучитьДвоичноеПредставлениеЧисла(Число1);
	ДвоичноеПредставлениеЧисла2 = ПолучитьДвоичноеПредставлениеЧисла(Число2);
	
	МассивДвоичногоЧисла1 = РазобратьДвоичноеПредставление(ДвоичноеПредставлениеЧисла1);
	МассивДвоичногоЧисла2 = РазобратьДвоичноеПредставление(ДвоичноеПредставлениеЧисла2);
	
	ДлинаМассива = МассивДвоичногоЧисла1.ВГраница();
	
	Для Инд = 0 По ДлинаМассива Цикл
		
		Если МассивДвоичногоЧисла1[Инд] = "1" ИЛИ МассивДвоичногоЧисла2[Инд] = "1" Тогда
			МассивДвоичногоЧисла1[Инд] = "1";
		КонецЕсли;
		
	КонецЦикла;
	
	ДвоичноеПредставлениеМассиваЧисла = ПолучитьДвоичноеПредставлениеМассиваЧисла(МассивДвоичногоЧисла1);
	
	Результат = ЧислоИзДвоичнойСтроки("0b" + ДвоичноеПредставлениеМассиваЧисла);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДвоичноеПредставлениеЧисла(Значение, Маска = "00000000000000000000000000000000")
	
	Результат = "";
	Шаблон    = "01";
	Основание = СтрДлина(Шаблон);
	
	Пока Значение > 0 Цикл
		
		Остаток    = Значение % Основание;
		Результат1 = Сред(Шаблон, Остаток + 1, 1);
		Значение   = (Значение - Остаток) / Основание;
		Результат  = Результат1 + Результат;
		
	КонецЦикла;
	
	ЧислоНулей = СтрДлина(Маска) - СтрДлина(Результат);
	Для Инд = 1 По ЧислоНулей Цикл 
		Результат = "0" + Результат;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ВыделитьПараметры(МассивПараметров, Знач Текст)

	НачалоПараметра = СтрНайти(Текст, "{v8 ");
	
	Если НачалоПараметра > 0 Тогда
		
		Текст = Прав(Текст, СтрДлина(Текст) - (НачалоПараметра+3));
		КонецПараметра = СтрНайти(Текст, "}");
		Если КонецПараметра > 0 Тогда
			ТекстПараметра = СокрЛП(Лев(Текст, КонецПараметра-1));
			МассивПараметров.Добавить(ТекстПараметра);
			Текст = Прав(Текст, СтрДлина(Текст) - (СтрДлина(ТекстПараметра) + 1));
		КонецЕсли;
		
		НачалоПараметра = СтрНайти(Текст, "{v8 ");
		Если НачалоПараметра > 0 Тогда
			ВыделитьПараметры(МассивПараметров, Текст);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьШиринуПоля(ЧтениеXML, Ширина, Знач ШиринаТаблицы = 0)
	
	ТипDXA = Ложь;
	ТипPCT = Ложь;
	
	Ширина    = ЧтениеXML.ПолучитьАтрибут("w:w");
	ТипШирины = ЧтениеXML.ПолучитьАтрибут("w:type");
	
	Если ТипШирины = "auto" Тогда
		ТипDXA = Ложь;
	ИначеЕсли ТипШирины = "dxa" Тогда
		ТипDXA = Истина;
	ИначеЕсли ТипШирины = "pct" Тогда
		ТипPCT = Истина;
	КонецЕсли;
	
	Если НЕ ТипDXA ИЛИ (ТипPCT И ШиринаТаблицы = 0) Тогда
		Ширина = 0;
	ИначеЕсли ТипPCT И НЕ ШиринаТаблицы = 0 Тогда
		
		// 5000 - значение равное 100% для типа "pct".
		// ПолеРодитель - в значениях dxa.
		
		Ширина = ШиринаТаблицы * Ширина / 50 / 100;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыВерхнегоКолонтитула(ПечатнаяФорма, ВерхнийКолонтитул, ДанныеОбъекта = Неопределено) 
	
	Если НЕ ТипЗнч(ДанныеОбъекта) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПараметрыОбласти(ПечатнаяФорма, ВерхнийКолонтитул, ДанныеОбъекта);
	
КонецПроцедуры

Процедура УПС_ЗаполнитьПараметры(ПечатнаяФорма, ОбластьМакета, ДанныеОбъекта = Неопределено) 
	
	Если НЕ ТипЗнч(ДанныеОбъекта) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПараметрыОбласти(ПечатнаяФорма, ОбластьМакета, ДанныеОбъекта);
	
КонецПроцедуры

Функция ОбластьМакета(СсылкаНаМакет, ОписаниеОбласти) 
	
	Область = Неопределено;
	
	Если ОписаниеОбласти.ТипОбласти = "ВерхнийКолонтитул" ИЛИ ОписаниеОбласти.ТипОбласти = "ВерхнийЧетныйКолонтитул" ИЛИ ОписаниеОбласти.ТипОбласти = "ВерхнийТитульныйКолонтитул" Тогда
		Область = ПолучитьОбластьВерхнегоКолонтитула(СсылкаНаМакет, ОписаниеОбласти.ИмяОбласти);
	ИначеЕсли ОписаниеОбласти.ТипОбласти = "НижнийКолонтитул"  ИЛИ ОписаниеОбласти.ТипОбласти = "НижнийЧетныйКолонтитул"  ИЛИ ОписаниеОбласти.ТипОбласти = "НижнийТитульныйКолонтитул" Тогда
		Область = ПолучитьОбластьНижнегоКолонтитула(СсылкаНаМакет, ОписаниеОбласти.ИмяОбласти);
	ИначеЕсли ОписаниеОбласти.ТипОбласти = "Общая" Тогда
		Область = ПолучитьОбластьМакета(СсылкаНаМакет, ОписаниеОбласти.ИмяОбласти);
	ИначеЕсли ОписаниеОбласти.ТипОбласти = "СтрокаТаблицы" Тогда
		Область = ПолучитьОбластьМакета(СсылкаНаМакет, ОписаниеОбласти.ИмяОбласти);
	ИначеЕсли ОписаниеОбласти.ТипОбласти = "Список" Тогда
		Область = ПолучитьОбластьМакета(СсылкаНаМакет, ОписаниеОбласти.ИмяОбласти);
	Иначе
		ВызватьИсключение ПодставитьПараметрыВСтроку(НСтр("ru = 'Тип области не указан или указан некорректно: %1.'"), ОписаниеОбласти.ТипОбласти);
	КонецЕсли;
	
	Если Область <> Неопределено Тогда
		Область.Вставить("ОписаниеОбласти", ОписаниеОбласти);
	КонецЕсли;
	
	Возврат Область;
	
КонецФункции

Функция ПолучитьОбластьВерхнегоКолонтитула(Макет, Знач ИмяОбласти = "ВерхнийКолонтитул", Знач НомерРаздела = 1) 
	
	Параметры = СтрРазделить(ИмяОбласти, "_");
	Если Параметры.Количество() = 2 Тогда
		ИмяОбласти = Параметры[0];
		Попытка
			НомерРаздела = Число(Параметры[1]);
		Исключение
			НомерРаздела = 1;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ПолучитьИзСтруктурыДокументаКолонтитул(Макет.СтруктураДокумента, ИмяОбласти, НомерРаздела);
	
КонецФункции

Функция ПолучитьОбластьНижнегоКолонтитула(Макет, Знач ИмяОбласти = "НижнийКолонтитул", Знач НомерРаздела = 1) 
	
	Параметры = СтрРазделить(ИмяОбласти, "_");
	Если Параметры.Количество() = 2 Тогда
		ИмяОбласти = Параметры[0];
		Попытка
			НомерРаздела = Число(Параметры[1]);
		Исключение
			НомерРаздела = 1;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ПолучитьИзСтруктурыДокументаКолонтитул(Макет.СтруктураДокумента, ИмяОбласти, НомерРаздела);
	
КонецФункции

Функция ПолучитьОбластьМакета(Макет, Знач ИмяОбласти) 
	
	Возврат ПолучитьИзСтруктурыДокументаОбластьДокумента(Макет.СтруктураДокумента, ИмяОбласти);
	
КонецФункции

Функция ИнициализироватьПечатнуюФорму(Макет = Неопределено) 
	
	Если Макет = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Необходимо указать значение параметра ""Макет""'");
	КонецЕсли;
	
	ПечатнаяФорма = ИнициализироватьПечатнуюФормуСлужебный(Макет);
	ПечатнаяФорма.Вставить("Тип", "DOCX");
	ПечатнаяФорма.Вставить("ПоследняяВыведеннаяОбласть", Неопределено);
	
	Возврат ПечатнаяФорма;
	
КонецФункции

Функция ИнициализироватьПечатнуюФормуСлужебный(Макет) 
	
	ИмяВременногоКаталога = СоздатьВременныйКаталог();
	
	КопироватьСодержимоеКаталога(Макет.ИмяКаталога, ИмяВременногоКаталога);
	
	СтруктураДокумента = ИнициализироватьДокумент();
	
	ПечатнаяФорма = Новый Структура;
	ПечатнаяФорма.Вставить("ИмяКаталога", ИмяВременногоКаталога);
	ПечатнаяФорма.Вставить("СтруктураДокумента", СтруктураДокумента);
	
	ИнициализироватьСтруктуруПечатнойФормы(ПечатнаяФорма, Макет);
	
	Возврат ПечатнаяФорма;
	
КонецФункции

Процедура КопироватьСодержимоеКаталога(Откуда, Куда)
	
	КаталогНазначения = Новый Файл(Куда);
	
	Если КаталогНазначения.Существует() Тогда
		Если КаталогНазначения.ЭтоФайл() Тогда
			УдалитьФайлы(КаталогНазначения.ПолноеИмя);
			СоздатьКаталог(Куда);
		КонецЕсли;
	Иначе
		СоздатьКаталог(Куда);
	КонецЕсли;
	
	Файлы = НайтиФайлы(Откуда, ПолучитьМаскуВсеФайлы());
	
	Для Каждого Файл Из Файлы Цикл
		Если Файл.ЭтоКаталог() Тогда
			КопироватьСодержимоеКаталога(Файл.ПолноеИмя, УстановитьРазделительПути(Куда + "\" + Файл.Имя));
		Иначе
			КопироватьФайл(Файл.ПолноеИмя, УстановитьРазделительПути(Куда + "\" + Файл.Имя));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьСтруктуруПечатнойФормы(ПечатнаяФорма, Макет)
	
	ИмяКаталога        = ПечатнаяФорма.ИмяКаталога;
	СтруктураДокумента = ПечатнаяФорма.СтруктураДокумента;
	
	СтруктураДокумента.ИдентификаторДокумента = Макет.СтруктураДокумента.ИдентификаторДокумента;
	СтруктураДокумента.КаталогКартинок        = ИмяКаталога + УстановитьРазделительПути("\word\media\");
	СтруктураДокумента.ТаблицаСвязейКонтента = Макет.СтруктураДокумента.ТаблицаСвязейКонтента.Скопировать();
	
	Файл = Новый Файл(ИмяКаталога + "[Content_Types].xml");
	Если Файл.Существует() Тогда
		ЧтениеXML = Новый ЧтениеТекста(Файл.ПолноеИмя,КодировкаТекста.UTF8);
		ТекстФайла = ЧтениеXML.Прочитать();
		СтруктураДокумента.ТипыКонтента = ТекстФайла;
	КонецЕсли;
	
	КаталогФайлаСвязей = ИмяКаталога + УстановитьРазделительПути("\word\_rels\");
	
	Файл = Новый Файл(КаталогФайлаСвязей + "document.xml.rels");
	Если Файл.Существует() Тогда
		ЧтениеXML = Новый ЧтениеТекста(Файл.ПолноеИмя, КодировкаТекста.UTF8);
		ТекстФайла = ЧтениеXML.Прочитать();
		СтруктураДокумента.СвязиКонтента = ТекстФайла;
	КонецЕсли;
	
	КаталогСоСтруктуройФайла = ИмяКаталога + "word" + ПолучитьРазделительПути();
	МаскаФайлов ="*.xml";
	СтруктурныеФайлы = НайтиФайлы(КаталогСоСтруктуройФайла, МаскаФайлов);
	
	Для Каждого Файл Из СтруктурныеФайлы Цикл
		Если Файл.ИмяБезРасширения = "document" Тогда
			ЗаписьXML = Новый ЗаписьТекста(Файл.ПолноеИмя, КодировкаТекста.UTF8);
			ЗаписьXML.Записать("");
		КонецЕсли;
		
		Если Лев(Файл.ИмяБезРасширения, 6) = "header" Тогда
			ЗаписьXML = Новый ЗаписьТекста(Файл.ПолноеИмя,КодировкаТекста.UTF8);
			ЗаписьXML.Записать("");
		КонецЕсли;
		
		Если Лев(Файл.ИмяБезРасширения, 6) = "footer" Тогда
			ЗаписьXML = Новый ЗаписьТекста(Файл.ПолноеИмя, КодировкаТекста.UTF8);
			ЗаписьXML.Записать("");
		КонецЕсли;
	КонецЦикла;
	
	// Текст копирования колонтитулов и разделов из макета
	Для Каждого Раздел Из Макет.СтруктураДокумента.Разделы Цикл
		ДобавитьВСтруктуруДокументаРаздел(СтруктураДокумента, Раздел.Значение);
	КонецЦикла;
	
	Для Каждого Колонтитул Из Макет.СтруктураДокумента.Колонтитулы Цикл
		
		ДобавитьВСтруктуруДокументаКолонтитул(СтруктураДокумента, Колонтитул.Значение);
		СтруктураКолонтитула = СтруктураДокумента.Колонтитулы.Получить(Колонтитул.Ключ);
		Если СтруктураКолонтитула <> Неопределено Тогда
			СтруктураКолонтитула.Текст = "";
		КонецЕсли;
		
	КонецЦикла;
	
	Абзац = Макет.СтруктураДокумента.ОбластиДокумента.Получить("Абзац");
	
	Если Абзац <> Неопределено Тогда
		ДобавитьВСтруктуруДокументаОбластьДокумента(СтруктураДокумента, Абзац);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьСсылки(ПечатнаяФорма, Знач УдалитьЗакрытьПриложение = Истина) 
	
	Если ПечатнаяФорма <> Неопределено Тогда
		ЗакрытьСоединение(ПечатнаяФорма);
		ПечатнаяФорма = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытьСоединение(ПечатнаяФорма) 
	
	Попытка
		УдалитьВременныйКаталог(ПечатнаяФорма.ИмяКаталога);
	Исключение
		ЗаписатьСобытияВЖурналРегистрации(СобытиеЖурналаРегистрации(), "Ошибка", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение(НСтр("ru = 'Не удалось удалить временный каталог шаблона печатной формы по причине:'") + Символы.ПС 
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьВременныйКаталог(Знач Путь) 
	
	Если ЭтоИмяВременногоФайла(Путь) Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверное значение параметра Путь в ФайловаяСистема.УдалитьВременныйКаталог:
				       |Каталог не является временным ""%1""'"), 
			Путь);
	КонецЕсли;
	
	УдалитьВременныеФайлы(Путь);
	
КонецПроцедуры

Процедура УдалитьВременныеФайлы(Знач Путь)
	
	Попытка
		УдалитьФайлы(Путь);
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Стандартные подсистемы'", "ru"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось удалить временный файл ""%1"" по причине:
					|%2'"),
				Путь,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
	
КонецПроцедуры

Функция ПодставитьПараметрыВСтроку(Знач ШаблонСтроки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) 
	
	ЕстьПараметрыСПроцентом = СтрНайти(Параметр1, "%")
		Или СтрНайти(Параметр2, "%")
		Или СтрНайти(Параметр3, "%")
		Или СтрНайти(Параметр4, "%")
		Или СтрНайти(Параметр5, "%")
		Или СтрНайти(Параметр6, "%")
		Или СтрНайти(Параметр7, "%")
		Или СтрНайти(Параметр8, "%")
		Или СтрНайти(Параметр9, "%");
		
	Если ЕстьПараметрыСПроцентом Тогда
		Возврат ПодставитьПараметрыСПроцентом(ШаблонСтроки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	КонецЕсли;
	
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%1", Параметр1);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%2", Параметр2);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%3", Параметр3);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%4", Параметр4);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%5", Параметр5);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%6", Параметр6);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%7", Параметр7);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%8", Параметр8);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%9", Параметр9);
	Возврат ШаблонСтроки;
	
КонецФункции

Функция ПодставитьПараметрыСПроцентом(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = СтрНайти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = Неопределено;
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр = Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр = Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр = Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр = Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр = Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр = Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр = Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр = Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр = Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = Неопределено Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = СтрНайти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

Функция ЭтоИмяВременногоФайла(Путь)
	
	// Ожидается, что Путь получен методом ПолучитьИмяВременногоФайла().
	// Перед проверкой разворачиваем слэши в одну сторону.
	Возврат Не СтрНачинаетсяС(СтрЗаменить(Путь, "/", "\"), СтрЗаменить(КаталогВременныхФайлов(), "/", "\"));
	
КонецФункции

Функция МакетИзДвоичныхДанных(ДвоичныеДанныеМакета)
	
	Расширение = ОпределитьРасширениеФайлаДанныхПоСигнатуре(ДвоичныеДанныеМакета);
	Если НЕ Расширение = "docx" Тогда
		ЗаписатьСобытияВЖурналРегистрации(НСтр("ru = 'Печать'"), "Ошибка", НСтр("ru = 'Макет шаблона офисного документа имеет не верный формат.'"));
		ВызватьИсключение(НСтр("ru = 'Ошибка анализа макета шаблона. Макет шаблона офисного документа имеет не верный формат.'"));
	КонецЕсли;
	
	ИмяВременногоФайла    = ПолучитьИмяВременногоФайла("docx");
	ИмяВременногоКаталога = СоздатьВременныйКаталог();
	
	ДвоичныеДанныеМакета.Записать(ИмяВременногоФайла);
	
	РазобратьКонтейнерДокументDOCX(ИмяВременногоФайла, ИмяВременногоКаталога);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	СтруктураДокумента = ИнициализироватьДокумент();
	
	Макет = Новый Структура;
	Макет.Вставить("ИмяКаталога",        ИмяВременногоКаталога);
	Макет.Вставить("СтруктураДокумента", СтруктураДокумента);
	
	ИнициализироватьСтруктуруМакета(Макет);
	
	Макет.Вставить("Тип", "DOCX");
	Макет.Вставить("НастройкиСтраницыМакета", Новый Соответствие);
	
	Возврат Макет;
	
КонецФункции

Процедура ИнициализироватьСтруктуруМакета(Макет)
	
	ИмяКаталога            = Макет.ИмяКаталога;
	СтруктураДокумента     = Макет.СтруктураДокумента;
	ТаблицаСвязейКонтента  = СтруктураДокумента.ТаблицаСвязейКонтента;
	
	Файл = Новый Файл(ИмяКаталога + "[Content_Types].xml");
	Если Файл.Существует() Тогда
		Чтение = Новый ЧтениеТекста(Файл.ПолноеИмя, КодировкаТекста.UTF8);
		ТекстФайла = Чтение.Прочитать();
		СтруктураДокумента.ТипыКонтента = ТекстФайла;
	КонецЕсли;
	
	КаталогФайлаСвязей = ИмяКаталога + УстановитьРазделительПути("\word\_rels\");
	
	Файл = Новый Файл(КаталогФайлаСвязей + "document.xml.rels");
	Если Файл.Существует() Тогда
		ЧтениеXML = Новый ЧтениеТекста(Файл.ПолноеИмя, КодировкаТекста.UTF8);
		ТекстФайла = ЧтениеXML.Прочитать();
		СтруктураДокумента.СвязиКонтента = ТекстФайла;
	
		ЧтениеXML = ИнициализироватьЧтениеXML(ТекстФайла);
		Пока ЧтениеXML.Прочитать() Цикл
			Если НЕ (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Relationship") Тогда
				Продолжить;
			КонецЕсли;
			
			ИдРесурса    = ЧтениеXML.ПолучитьАтрибут("Id");
			НомерРесурса = Число(СтрЗаменить(СокрЛП(ИдРесурса),"rId",""));
			
			НоваяСтрока = ТаблицаСвязейКонтента.Добавить();
			НоваяСтрока.ИмяРесурса   = ЧтениеXML.ПолучитьАтрибут("Target");
			НоваяСтрока.ИдРесурса    = ИдРесурса;
			НоваяСтрока.НомерРесурса = НомерРесурса;
		КонецЦикла;
	КонецЕсли;
	
	// Получить таблицу номеров ресурсов
	
	КаталогСоСтруктуройФайла = ИмяКаталога + "word" + ПолучитьРазделительПути();
	
	Файл = Новый Файл(КаталогСоСтруктуройФайла + "document.xml");
	Если Файл.Существует() Тогда
		ЧтениеXML = ИнициализироватьЧтениеXML(Файл.ПолноеИмя, 1);
		ПараметрыАнализа = Новый Структура("ТипАнализа", 1);
		РазбитьТекстШаблонаНаОбласти(ЧтениеXML, СтруктураДокумента, ПараметрыАнализа);
	КонецЕсли;
	
	Для Каждого Раздел Из СтруктураДокумента.Разделы Цикл
		ЧтениеXML = ИнициализироватьЧтениеXML(Раздел.Значение.Текст);
		ВыделитьИзРазделаКолонтитулы(ЧтениеXML, СтруктураДокумента, Раздел.Значение);
	КонецЦикла;
	
	СтруктурныеФайлы = НайтиФайлы(КаталогСоСтруктуройФайла, "*.xml");
	Для Каждого Файл Из СтруктурныеФайлы Цикл
		Если НЕ (Лев(Файл.ИмяБезРасширения, 6) = "header") И НЕ (Лев(Файл.ИмяБезРасширения, 6) = "footer") Тогда
			Продолжить;
		КонецЕсли;
		
		Колонтитул = СтруктураДокумента.Колонтитулы.Получить(Файл.Имя); // см. ОбластьКолонтитула
		Если Колонтитул = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДокумента.Колонтитулы.Удалить(Файл.Имя);
		СтруктураДокумента.Колонтитулы.Вставить(Колонтитул.Имя + "_" + Формат(Колонтитул.НомерРаздела, "ЧГ=0"), Колонтитул);
		
		ЧтениеXML = ИнициализироватьЧтениеXML(Файл.ПолноеИмя, 1);
		ПараметрыАнализа = Новый Структура("ТипАнализа, СтруктураАнализа", 2, Колонтитул);
		РазбитьТекстШаблонаНаОбласти(ЧтениеXML, СтруктураДокумента, ПараметрыАнализа);
	КонецЦикла;
	
КонецПроцедуры

Функция УстановитьРазделительПути(Знач Путь)
	Возврат СтрСоединить(СтрРазделить(Путь, "\/", Истина), ПолучитьРазделительПути());
КонецФункции

Функция СоздатьВременныйКаталог(Знач Расширение = "") 
	
	ПутьККаталогу = ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла(Расширение));
	СоздатьКаталог(ПутьККаталогу);
	Возврат ПутьККаталогу;
	
КонецФункции

// Добавляет к переданному пути каталога конечный символ-разделитель, если он отсутствует.
//
// Параметры:
//  ПутьКаталога - Строка - путь к каталогу.
//  Платформа - ТипПлатформы - параметр устарел, больше не используется.
//
// Возвращаемое значение:
//  Строка - путь к каталогу с конечным символом-разделителем.
//
// Пример:
//  Результат = ДобавитьКонечныйРазделительПути("C:\Мой каталог"); // возвращает "C:\Мой каталог\".
//  Результат = ДобавитьКонечныйРазделительПути("C:\Мой каталог\"); // возвращает "C:\Мой каталог\".
//  Результат = ДобавитьКонечныйРазделительПути("%APPDATA%"); // возвращает "%APPDATA%\".
//
Функция ДобавитьКонечныйРазделительПути(Знач ПутьКаталога, Знач Платформа = Неопределено) 
	Если ПустаяСтрока(ПутьКаталога) Тогда
		Возврат ПутьКаталога;
	КонецЕсли;
	
	ДобавляемыйСимвол = ПолучитьРазделительПути();
	
	Если СтрЗаканчиваетсяНа(ПутьКаталога, ДобавляемыйСимвол) Тогда
		Возврат ПутьКаталога;
	Иначе 
		Возврат ПутьКаталога + ДобавляемыйСимвол;
	КонецЕсли;
КонецФункции

Процедура ЗаписатьСобытияВЖурналРегистрации(ИмяСобытия, ПредставлениеУровня, Комментарий)
	
	СписокСобытий = Новый СписокЗначений;
	
	СтруктураСобытия = Новый Структура;
	СтруктураСобытия.Вставить("ИмяСобытия", ИмяСобытия);
	СтруктураСобытия.Вставить("ПредставлениеУровня", ПредставлениеУровня);
	СтруктураСобытия.Вставить("Комментарий", Комментарий);
	
	СписокСобытий.Добавить(СтруктураСобытия);
	
	Для Каждого СообщениеЖурнала Из СписокСобытий Цикл
		ЗначениеСообщения = СообщениеЖурнала.Значение;
		ИмяСобытия = ЗначениеСообщения.ИмяСобытия;
		УровеньСобытия = УровеньСобытияПоПредставлению(ЗначениеСообщения.ПредставлениеУровня);
		ДатаСобытия = ТекущаяДатаСеанса();
		Если ЗначениеСообщения.Свойство("ДатаСобытия") И ЗначениеЗаполнено(ЗначениеСообщения.ДатаСобытия) Тогда
			ДатаСобытия = ЗначениеСообщения.ДатаСобытия;
		КонецЕсли;
		Комментарий = Строка(ДатаСобытия) + " " + ЗначениеСообщения.Комментарий;
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньСобытия,,, Комментарий);
	КонецЦикла;
	
КонецПроцедуры

Функция УровеньСобытияПоПредставлению(ПредставлениеУровня)
	Если ПредставлениеУровня = "Информация" Тогда
		Возврат УровеньЖурналаРегистрации.Информация;
	ИначеЕсли ПредставлениеУровня = "Ошибка" Тогда
		Возврат УровеньЖурналаРегистрации.Ошибка;
	ИначеЕсли ПредставлениеУровня = "Предупреждение" Тогда
		Возврат УровеньЖурналаРегистрации.Предупреждение; 
	ИначеЕсли ПредставлениеУровня = "Примечание" Тогда
		Возврат УровеньЖурналаРегистрации.Примечание;
	КонецЕсли;	
КонецФункции

Функция ОпределитьРасширениеФайлаДанныхПоСигнатуре(ДвоичныеДанныеМакета) 
	
	Если ДвоичныеДанныеМакета = Неопределено Тогда
		 Возврат Неопределено;
	КонецЕсли;	
	 
	ПотокДанных = ДвоичныеДанныеМакета.ОткрытьПотокДляЧтения();
	ЧтениеДанных = Новый ЧтениеДанных(ПотокДанных);
	
	Символ1 = ЧтениеДанных.ПрочитатьБайт();
	Символ2 = ЧтениеДанных.ПрочитатьБайт();
	Символ3 = ЧтениеДанных.ПрочитатьБайт();
	Символ4 = ЧтениеДанных.ПрочитатьБайт();
	Символ5 = ЧтениеДанных.ПрочитатьБайт();
	Символ6 = ЧтениеДанных.ПрочитатьБайт();
	Символ7 = ЧтениеДанных.ПрочитатьБайт();
	Символ8 = ЧтениеДанных.ПрочитатьБайт();
	
	ПотокДанных.Закрыть();
	
	Если Символ1 = 208 И Символ2 = 207 И Символ3 = 17 И Символ4 = 224 И Символ5 = 161 И Символ6 = 177 И Символ7 = 26 И Символ8 = 225 Тогда
		Возврат "doc";
	ИначеЕсли Символ1 = 80 И Символ2 = 75 И Символ3 = 3 И Символ4 = 4 И Символ5 = 20 И Символ6 = 0 И Символ7 = 0 И Символ8 = 8
			  ИЛИ Символ1 = 80 И Символ2 = 75 И Символ3 = 3 И Символ4 = 4 И Символ5 = 10 И Символ6 = 0 И Символ7 = 0 И Символ8 = 0 Тогда
		Возврат "odt";
	ИначеЕсли Символ1 = 80 И Символ2 = 75 И Символ3 = 3 И Символ4 = 4 И Символ5 = 20 И Символ6 = 0 Тогда
		Возврат "docx";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьОписаниеОбласти(ОбластиМакетаОфисногоДокумента, Знач ИмяОбласти, Знач ТипОбласти)
	
	НоваяОбласть = Новый Структура;
	
	НоваяОбласть.Вставить("ИмяОбласти", ИмяОбласти);
	НоваяОбласть.Вставить("ТипОбласти", ТипОбласти);
	
	ОбластиМакетаОфисногоДокумента.Вставить(ИмяОбласти, НоваяОбласть);
	
КонецПроцедуры

Функция СобытиеЖурналаРегистрации()
	Возврат НСтр("ru = 'Печать'", "ru");	
КонецФункции

#КонецОбласти

#Область РаботаСOpenOfficeXML

Процедура РазобратьКонтейнерДокументDOCX(Знач ПолноеИмяФайла, Знач ПутьКСтруктуреФайла)
	
	Попытка
		Архиватор = Новый ЧтениеZipФайла(ПолноеИмяФайла);
	Исключение
		УдалитьФайлы(ПолноеИмяФайла);
		ЗаписатьСобытияВЖурналРегистрации(СобытиеЖурналаРегистрации(), "Ошибка", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение(НСтр("ru = 'Не удалось открыть файла шаблона по причине:'") + Символы.ПС 
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Попытка
		Архиватор.ИзвлечьВсе(ПутьКСтруктуреФайла, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	Исключение
		Архиватор.Закрыть();
		УдалитьФайлы(ПолноеИмяФайла);
		ЗаписатьСобытияВЖурналРегистрации(СобытиеЖурналаРегистрации(), "Ошибка", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение(НСтр("ru = 'Не удалось выполнить разбор файла шаблона по причине:'") + Символы.ПС 
			+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Архиватор.Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область РазборДокументаXMLНаОбласти

Процедура ИнициализироватьЗаписьВПоток(СтруктураРазбораXML, ИмяПотока, КорневойТэг = "w:next", ЗаписатьОбъявление = Истина)
	
	Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) И НЕ СтруктураРазбораXML.БлокирующийПоток = ИмяПотока Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураРазбораXML.ПотокиЗаписи.Свойство(ИмяПотока) Тогда
		СтруктураРазбораXML.ПотокиЗаписи.Вставить(ИмяПотока, Новый Структура("Поток, ЗаписьРазрешена, Уровень, ПотокЗакрыт, ТекстПотока, УровеньАбзаца"));
	КонецЕсли;
	
	Если НЕ СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].ЗаписьРазрешена = Неопределено Тогда
		ВозобновитьЗаписьВПоток(СтруктураРазбораXML, ИмяПотока);
		Возврат;
	КонецЕсли;
	
	СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].ЗаписьРазрешена  = Истина;
	СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].Поток            = ИнициализироватьЗаписьXML(КорневойТэг, , , ЗаписатьОбъявление);
	СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].Уровень          = ?(ПустаяСтрока(КорневойТэг), 0, 1);
	СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].ПотокЗакрыт      = Ложь;
	СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].ТекстПотока      = "";
	СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].УровеньАбзаца    = СтруктураРазбораXML.ТекущийУровеньАбзаца;
	
КонецПроцедуры

Процедура ОстановитьЗаписьВПоток(СтруктураРазбораXML, ИмяПотока)
	
	Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) И НЕ СтруктураРазбораXML.БлокирующийПоток = ИмяПотока Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураРазбораXML.ПотокиЗаписи.Свойство(ИмяПотока) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].ЗаписьРазрешена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].ЗаписьРазрешена = Ложь;
	
КонецПроцедуры

Процедура ВозобновитьЗаписьВПоток(СтруктураРазбораXML, ИмяПотока)
	
	Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) И НЕ СтруктураРазбораXML.БлокирующийПоток = ИмяПотока Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураРазбораXML.ПотокиЗаписи.Свойство(ИмяПотока) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].ЗаписьРазрешена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].ЗаписьРазрешена = Истина;
	
КонецПроцедуры

Процедура СброситьЗаписьВПоток(СтруктураРазбораXML, ИмяПотока)
	
	Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) И НЕ СтруктураРазбораXML.БлокирующийПоток = ИмяПотока Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураРазбораXML.ПотокиЗаписи.Свойство(ИмяПотока) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].ЗаписьРазрешена = Неопределено;
	
КонецПроцедуры

Функция ЗавершитьЗаписьВПоток(СтруктураРазбораXML, ИмяПотока)
	
	Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) И НЕ СтруктураРазбораXML.БлокирующийПоток = ИмяПотока Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ СтруктураРазбораXML.ПотокиЗаписи.Свойство(ИмяПотока) Тогда
		Возврат "";
	КонецЕсли;
	
	Если СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].ПотокЗакрыт = Истина Тогда
		Возврат "";
	КонецЕсли;
	
	Пока СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].Уровень > 0 Цикл
		СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].Поток.ЗаписатьКонецЭлемента();
		СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].Уровень = СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].Уровень - 1;
	КонецЦикла;
	
	СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].ТекстПотока = СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].Поток.Закрыть();
	СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].ЗаписьРазрешена = Неопределено;
	СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].ПотокЗакрыт = Истина;
	
	Возврат СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].ТекстПотока;
	
КонецФункции

Процедура ПеренестиЗаписьВПоток(СтруктураРазбораXML, ИмяПотокаИсточника, ИмяПотокаПриемника)
	
	Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) И НЕ СтруктураРазбораXML.БлокирующийПоток = ИмяПотокаПриемника Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураРазбораXML.ПотокиЗаписи.Свойство(ИмяПотокаИсточника)
		 ИЛИ НЕ СтруктураРазбораXML.ПотокиЗаписи.Свойство(ИмяПотокаПриемника) Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьЗаписьВПоток(СтруктураРазбораXML, ИмяПотокаИсточника);
	
	ТекстПотока = СтруктураРазбораXML.ПотокиЗаписи[ИмяПотокаИсточника].ТекстПотока;
	ТекстПотока = СтрЗаменить(ТекстПотока, "<w:next>", "<w:next " + СтруктураРазбораXML.АтрибутыXML + ">");
	
	ЧтениеXML = ИнициализироватьЧтениеXML(ТекстПотока);
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.Имя = "w:next" Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписатьЭлементXML(ЧтениеXML, СтруктураРазбораXML.ПотокиЗаписи[ИмяПотокаПриемника].Поток);
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

Процедура ПеренестиОткрывающиеТэгиЗаписиВПоток(СтруктураРазбораXML, ИмяПотокаИсточника, ИмяПотокаПриемника, СтопТэг)
	
	Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) И НЕ СтруктураРазбораXML.БлокирующийПоток = ИмяПотокаПриемника Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураРазбораXML.ПотокиЗаписи.Свойство(ИмяПотокаИсточника)
		 ИЛИ НЕ СтруктураРазбораXML.ПотокиЗаписи.Свойство(ИмяПотокаПриемника) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураРазбораXML.ПотокиЗаписи[ИмяПотокаИсточника].ПотокЗакрыт Тогда
		СтруктураРазбораXML.ПотокиЗаписи[ИмяПотокаИсточника].ЗаписьРазрешена = Ложь;
		СтруктураРазбораXML.ПотокиЗаписи[ИмяПотокаИсточника].Поток.ЗаписатьКонецЭлемента();
		СтруктураРазбораXML.ПотокиЗаписи[ИмяПотокаИсточника].ТекстПотока = СтруктураРазбораXML.ПотокиЗаписи[ИмяПотокаИсточника].Поток.Закрыть();
		СтруктураРазбораXML.ПотокиЗаписи[ИмяПотокаИсточника].ПотокЗакрыт = Истина;
	КонецЕсли;
	
	ТекстПотока = СтруктураРазбораXML.ПотокиЗаписи[ИмяПотокаИсточника].ТекстПотока;
	ТекстПотока = СтрЗаменить(ТекстПотока, "<w:next>", "<w:next " + СтруктураРазбораXML.АтрибутыXML + ">");
	
	ЧтениеXML = ИнициализироватьЧтениеXML(ТекстПотока);
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.Имя = "w:next" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = СтопТэг Тогда
			Прервать;
		КонецЕсли;
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			СтруктураРазбораXML.ПотокиЗаписи[ИмяПотокаПриемника].Уровень = СтруктураРазбораXML.ПотокиЗаписи[ИмяПотокаПриемника].Уровень + 1;
		КонецЕсли;
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			СтруктураРазбораXML.ПотокиЗаписи[ИмяПотокаПриемника].Уровень = СтруктураРазбораXML.ПотокиЗаписи[ИмяПотокаПриемника].Уровень - 1;
		КонецЕсли;
		
		ЗаписатьЭлементXML(ЧтениеXML, СтруктураРазбораXML.ПотокиЗаписи[ИмяПотокаПриемника].Поток);
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

Процедура ДобавитьАтрибутВПоток(СтруктураРазбораXML, ИмяПотока, ИмяАтрибута, ЗначениеАтрибута)
	
	Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) И НЕ СтруктураРазбораXML.БлокирующийПоток = ИмяПотока Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураРазбораXML.ПотокиЗаписи.Свойство(ИмяПотока) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].ПотокЗакрыт = Истина Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].Поток.ЗаписатьНачалоАтрибута(ИмяАтрибута);
	СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].Поток.ЗаписатьТекст(ЗначениеАтрибута);
	СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].Поток.ЗаписатьКонецАтрибута();
	
КонецПроцедуры

Процедура ДобавитьТекстВПоток(СтруктураРазбораXML, ИмяПотока, Текст)
	
	Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) И НЕ СтруктураРазбораXML.БлокирующийПоток = ИмяПотока Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураРазбораXML.ПотокиЗаписи.Свойство(ИмяПотока) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].ПотокЗакрыт = Истина Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].Поток.ЗаписатьТекст(Текст);
	
КонецПроцедуры

Процедура ЗакрытьЭлементыВПотоке(СтруктураРазбораXML, ИмяПотока, КоличествоЭлементов)
	
	Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) И НЕ СтруктураРазбораXML.БлокирующийПоток = ИмяПотока Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураРазбораXML.ПотокиЗаписи.Свойство(ИмяПотока) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].ПотокЗакрыт = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Для Индекс = 1 По КоличествоЭлементов Цикл
		СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].Поток.ЗаписатьКонецЭлемента();
		СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].Уровень = СтруктураРазбораXML.ПотокиЗаписи.СтрокиПарам.Уровень - 1;
	КонецЦикла;
	
КонецПроцедуры

Функция ПотокАктивен(СтруктураРазбораXML, ИмяПотока)
	
	Если НЕ СтруктураРазбораXML.ПотокиЗаписи.Свойство(ИмяПотока) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтруктураРазбораXML.ПотокиЗаписи[ИмяПотока].ЗаписьРазрешена = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаписатьИнструкциюОбработкиВПотоки(СтруктураРазбораXML, ЧтениеXML, ИмяПотока = "")
	
	Для Каждого ЭлементПотока Из СтруктураРазбораXML.ПотокиЗаписи Цикл
		
		Если СтруктураРазбораXML.ТекущийУровеньАбзаца <> ЭлементПотока.Значение.УровеньАбзаца Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) И НЕ ЭлементПотока.Ключ = СтруктураРазбораXML.БлокирующийПоток Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ИмяПотока) И НЕ ЭлементПотока.Ключ = ИмяПотока Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЭлементПотока.Значение.ЗаписьРазрешена = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементПотока.Значение.Поток.ЗаписатьИнструкциюОбработки(ЧтениеXML.Имя, ЧтениеXML.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьНачалоЭлементаВПотоки(СтруктураРазбораXML, ЧтениеXML, ИмяПотока = "")
	
	Для Каждого ЭлементПотока Из СтруктураРазбораXML.ПотокиЗаписи Цикл
		
		Если СтруктураРазбораXML.ТекущийУровеньАбзаца <> ЭлементПотока.Значение.УровеньАбзаца Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) И НЕ ЭлементПотока.Ключ = СтруктураРазбораXML.БлокирующийПоток Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ИмяПотока) И НЕ ЭлементПотока.Ключ = ИмяПотока Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЭлементПотока.Значение.ЗаписьРазрешена = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементПотока.Значение.Поток.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
		ЭлементПотока.Значение.Уровень = ЭлементПотока.Значение.Уровень + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьАтрибутВПотоки(СтруктураРазбораXML, ЧтениеXML, ИмяПотока = "", Знач Текст = Неопределено)
	
	Для Каждого ЭлементПотока Из СтруктураРазбораXML.ПотокиЗаписи Цикл
		
		Если СтруктураРазбораXML.ТекущийУровеньАбзаца <> ЭлементПотока.Значение.УровеньАбзаца Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) И НЕ ЭлементПотока.Ключ = СтруктураРазбораXML.БлокирующийПоток Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ИмяПотока) И НЕ ЭлементПотока.Ключ = ИмяПотока Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЭлементПотока.Значение.ЗаписьРазрешена = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Если Текст = Неопределено Тогда
			Текст = ЧтениеXML.Значение;
		КонецЕсли;
		
		ЭлементПотока.Значение.Поток.ЗаписатьНачалоАтрибута(ЧтениеXML.Имя);
		ЭлементПотока.Значение.Поток.ЗаписатьТекст(Текст);
		ЭлементПотока.Значение.Поток.ЗаписатьКонецАтрибута();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьКонецЭлементаВПотоки(СтруктураРазбораXML, ЧтениеXML, ИмяПотока = "")
	
	Для Каждого ЭлементПотока Из СтруктураРазбораXML.ПотокиЗаписи Цикл
		
		Если СтруктураРазбораXML.ТекущийУровеньАбзаца <> ЭлементПотока.Значение.УровеньАбзаца Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) И НЕ ЭлементПотока.Ключ = СтруктураРазбораXML.БлокирующийПоток Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ИмяПотока) И НЕ ЭлементПотока.Ключ = ИмяПотока Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЭлементПотока.Значение.ЗаписьРазрешена = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементПотока.Значение.Поток.ЗаписатьКонецЭлемента();
		ЭлементПотока.Значение.Уровень = ЭлементПотока.Значение.Уровень - 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьТекстВПотоки(СтруктураРазбораXML, ЧтениеXML, ИмяПотока = "", Знач Текст = Неопределено)
	
	Для Каждого ЭлементПотока Из СтруктураРазбораXML.ПотокиЗаписи Цикл
		
		Если СтруктураРазбораXML.ТекущийУровеньАбзаца <> ЭлементПотока.Значение.УровеньАбзаца Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) И НЕ ЭлементПотока.Ключ = СтруктураРазбораXML.БлокирующийПоток Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ИмяПотока) И НЕ ЭлементПотока.Ключ = ИмяПотока Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЭлементПотока.Значение.ЗаписьРазрешена = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Если Текст = Неопределено Тогда
			Текст = ЧтениеXML.Значение;
		КонецЕсли;
		
		ЧислоСтрок = ?(ПустаяСтрока(Текст), 1, СтрЧислоСтрок(Текст));
		
		Если ЧислоСтрок > 1 Тогда
			
			Для Инд = 1 По ЧислоСтрок Цикл
				
				СтрокаТекста = СтрПолучитьСтроку(Текст, Инд);
				ЭлементПотока.Значение.Поток.ЗаписатьТекст(СтрокаТекста);
				
				Если Инд < ЧислоСтрок Тогда
					ЭлементПотока.Значение.Поток.ЗаписатьКонецЭлемента();
					ЭлементПотока.Значение.Поток.ЗаписатьНачалоЭлемента("w:br");
					ЭлементПотока.Значение.Поток.ЗаписатьКонецЭлемента();
					ЭлементПотока.Значение.Поток.ЗаписатьНачалоЭлемента("w:t");
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			ЭлементПотока.Значение.Поток.ЗаписатьТекст(Текст);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьЭлементXMLВПоток(СтруктураРазбораXML, ЧтениеXML, СтруктураДокумента)
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.ИнструкцияОбработки Тогда
		
		ЗаписатьИнструкциюОбработкиВПотоки(СтруктураРазбораXML, ЧтениеXML);
		
	ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		
		ИмяУзла = ЧтениеXML.Имя;
		
		ЗаписатьНачалоЭлементаВПотоки(СтруктураРазбораXML, ЧтениеXML);
		
		Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
			
			Если ПустаяСтрока(СтруктураДокумента.ИдентификаторДокумента) И (Лев(ЧтениеXML.Имя, 6) = "w:rsid") Тогда
				СтруктураДокумента.ИдентификаторДокумента = ЧтениеXML.Значение;
			КонецЕсли;
			
			ЗначениеАтрибута = ЧтениеXML.Значение;
			
			Если Лев(ЧтениеXML.Имя, 6) = "w:rsid" Тогда
				ЗначениеАтрибута = СтруктураДокумента.ИдентификаторДокумента;
			КонецЕсли;
			
			ЗаписатьАтрибутВПотоки(СтруктураРазбораXML, ЧтениеXML,, ЗначениеАтрибута);
			
			Если ИмяУзла = "w:document" ИЛИ ИмяУзла = "w:ftr" ИЛИ ИмяУзла = "w:hdr" Тогда
				СтруктураРазбораXML.АтрибутыXML = СтруктураРазбораXML.АтрибутыXML + " " + ЧтениеXML.Имя + "=""" + ЧтениеXML.Значение + """";
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		
		ЗаписатьКонецЭлементаВПотоки(СтруктураРазбораXML, ЧтениеXML);
		
	ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
		
		Если СтруктураРазбораXML.Свойство("СтатусТэга1С") Тогда
			АнализироватьПараметрыВСтроке(ЧтениеXML.Значение, СтруктураРазбораXML);
		КонецЕсли;
		
		ЗаписатьТекстВПотоки(СтруктураРазбораXML, ЧтениеXML);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЧтениеНачалаЛюбогоБлокаКромеПараграфа(СтруктураРазбораXML, ЧтениеXML)
	
	Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НЕ ЧтениеXML.Имя = "w:p";
	
КонецФункции

Функция ЧтениеКонцаЛюбогоБлокаКромеПараграфа(СтруктураРазбораXML, ЧтениеXML)
	
	Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И НЕ ЧтениеXML.Имя = "w:p";
	
КонецФункции

Функция ЧтениеНачалаТелаДокумента(СтруктураРазбораXML, ЧтениеXML)
	
	Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "w:body";
	
КонецФункции

Функция ЧтениеНачалаТелаКолонтитула(СтруктураРазбораXML, ЧтениеXML)
	
	Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И (ЧтениеXML.Имя = "w:ftr" ИЛИ ЧтениеXML.Имя = "w:hdr");
	
КонецФункции

Функция ЧтениеНачалаПараграфа(СтруктураРазбораXML, ЧтениеXML)
	
	Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "w:p";
	
КонецФункции

Функция ЧтениеКонцаПараграфа(СтруктураРазбораXML, ЧтениеXML)
	
	Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "w:p";
	
КонецФункции

Функция ЧтениеНачалаСтроки(СтруктураРазбораXML, ЧтениеXML)
	
	Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "w:r";
	
КонецФункции

Функция ЧтениеКонцаСтроки(СтруктураРазбораXML, ЧтениеXML)
	
	Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "w:r";
	
КонецФункции

Функция ЧтениеНачалаТекстаСтроки(СтруктураРазбораXML, ЧтениеXML)
	
	Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "w:t";
	
КонецФункции

Функция ЧтениеКонцаТекстаСтроки(СтруктураРазбораXML, ЧтениеXML)
	
	Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "w:t";
	
КонецФункции

Функция ЧтениеНачалаТаблицы(СтруктураРазбораXML, ЧтениеXML)
	
	Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "w:tbl";
	
КонецФункции

Функция ЧтениеКонцаТаблицы(СтруктураРазбораXML, ЧтениеXML)
	
	Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "w:tbl";
	
КонецФункции

Функция ЧтениеНачалаШириныТаблицы(СтруктураРазбораXML, ЧтениеXML)
	
	Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "w:tblW";
	
КонецФункции

Функция ЧтениеНачалаШириныКлеткиТаблицы(СтруктураРазбораXML, ЧтениеXML)
	
	Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "w:tcW";
	
КонецФункции

Функция ЧтениеНачалаКлеткиТаблицы(СтруктураРазбораXML, ЧтениеXML)
	
	Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "w:tc";
	
КонецФункции

Функция ЧтениеКонцаКлеткиТаблицы(СтруктураРазбораXML, ЧтениеXML)
	
	Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "w:tc";
	
КонецФункции

Функция ЧтениеНачалаРаздела(СтруктураРазбораXML, ЧтениеXML)
	
	Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) И НЕ СтруктураРазбораXML.БлокирующийПоток = "Раздел" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "w:sectPr";
	
КонецФункции

Функция ЧтениеКонцаРаздела(СтруктураРазбораXML, ЧтениеXML)
	
	Если Не ПустаяСтрока(СтруктураРазбораXML.БлокирующийПоток) И НЕ СтруктураРазбораXML.БлокирующийПоток = "Раздел" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "w:sectPr";
	
КонецФункции

Функция ИнициализироватьРазборXML()
	
	Результат = Новый Структура;
	Результат.Вставить("ПотокиЗаписи",      Новый Структура);
	Результат.Вставить("АтрибутыXML",       "");
	Результат.Вставить("ИмяОбласти",        "");
	Результат.Вставить("СтатусОбласти",     0);
	Результат.Вставить("НомерРаздела",      1);
	Результат.Вставить("БлокирующийПоток",  "");
	Результат.Вставить("РазобранныеСтроки", Новый Массив);
	Результат.Вставить("ИмяПотокаФормата",  "");
	Результат.Вставить("ТекущийУровеньАбзаца", "0");
	
	Возврат Результат;
	
КонецФункции

Функция ТипыКолонтитулов()
	
	Результат = Новый Соответствие;
	Результат.Вставить("w:headerReference_even",    "ВерхнийЧетныйКолонтитул");
	Результат.Вставить("w:footerReference_even",    "НижнийЧетныйКолонтитул");
	Результат.Вставить("w:headerReference_first",   "ВерхнийТитульныйКолонтитул");
	Результат.Вставить("w:footerReference_first",   "НижнийТитульныйКолонтитул");
	Результат.Вставить("w:headerReference_default", "ВерхнийКолонтитул");
	Результат.Вставить("w:footerReference_default", "НижнийКолонтитул");
	
	Возврат Результат;
	
КонецФункции

Процедура СброситьСтатусыТэгов1С(СтруктураРазбораXML, СброситьПотокиШаблоннойСтроки = Ложь)
	
	СтруктураРазбораXML.Вставить("СтатусТэга1С",     0);
	СтруктураРазбораXML.Вставить("ТипТэга1С",        0);
	СтруктураРазбораXML.Вставить("ИмяТэга1С",        "");
	СтруктураРазбораXML.Вставить("ПолноеИмяТэга1С",  "");
	СтруктураРазбораXML.Вставить("ТекстДоТэга1С",    "");
	СтруктураРазбораXML.Вставить("ТекстПослеТэга1С", "");
	
	Если СброситьПотокиШаблоннойСтроки Тогда
		СброситьПотокиШаблоннойСтроки(СтруктураРазбораXML)
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРазобраннуюСтроку(СтруктураРазбораXML, Строка, СтатусТэга1С = 0, ИмяОбласти = "", ПотокФормата = "")
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("СтатусТэга1С", СтатусТэга1С);
	СтруктураСтроки.Вставить("ИмяОбласти",   ИмяОбласти);
	СтруктураСтроки.Вставить("Текст",        Строка);
	СтруктураСтроки.Вставить("ПотокФормата", ПотокФормата);
	
	СтруктураРазбораXML.РазобранныеСтроки.Добавить(СтруктураСтроки);
	
КонецПроцедуры

Процедура СформироватьРазобранныеСтроки(СтруктураРазбораXML)
	
	Если СтруктураРазбораXML.СтатусТэга1С = 7 И СтруктураРазбораXML.ТипТэга1С = 0
		 ИЛИ СтруктураРазбораXML.СтатусТэга1С = 3 И СтруктураРазбораXML.ТипТэга1С = 1 И НЕ ПустаяСтрока(СтруктураРазбораXML.ИмяОбласти)
		 ИЛИ СтруктураРазбораXML.СтатусТэга1С = 7 И СтруктураРазбораXML.ТипТэга1С = 1 И НЕ СтруктураРазбораXML.ИмяТэга1С = СтруктураРазбораXML.ИмяОбласти Тогда
		
		СброситьСтатусыТэгов1С(СтруктураРазбораXML, Истина);
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураРазбораXML.ТекстДоТэга1С = "" Тогда
		ДобавитьРазобраннуюСтроку(СтруктураРазбораXML, СтруктураРазбораXML.ТекстДоТэга1С,,,"ФорматТекстаДо");
	КонецЕсли;
	
	Если НЕ СтруктураРазбораXML.ПолноеИмяТэга1С = "" Тогда
		Если СтруктураРазбораXML.СтатусТэга1С = 3 ИЛИ СтруктураРазбораXML.СтатусТэга1С = 7 Тогда
			СтруктураРазбораXML.ПолноеИмяТэга1С = СтрЗаменить(СтруктураРазбораXML.ПолноеИмяТэга1С, " ", "");
			СтруктураРазбораXML.ПолноеИмяТэга1С = СтрЗаменить(СтруктураРазбораXML.ПолноеИмяТэга1С, "{v8", "{v8 ");
			СтруктураРазбораXML.ПолноеИмяТэга1С = СтрЗаменить(СтруктураРазбораXML.ПолноеИмяТэга1С, "{/v8", "{/v8 ");
		КонецЕсли;
		ДобавитьРазобраннуюСтроку(СтруктураРазбораXML, СтруктураРазбораXML.ПолноеИмяТэга1С, ?(СтруктураРазбораXML.ТипТэга1С = 1, СтруктураРазбораXML.СтатусТэга1С, 0), ?(СтруктураРазбораXML.ТипТэга1С = 1, СтруктураРазбораXML.ИмяТэга1С, ""),"ФорматТэга1С");
	КонецЕсли;
	
	Если НЕ СтруктураРазбораXML.ТекстПослеТэга1С = "" Тогда
		ДобавитьРазобраннуюСтроку(СтруктураРазбораXML, СтруктураРазбораXML.ТекстПослеТэга1С,,,"ФорматТекстаПосле");
	КонецЕсли;
	
	СброситьСтатусыТэгов1С(СтруктураРазбораXML);
	
КонецПроцедуры

Процедура ОчиститьРазобранныеСтроки(СтруктураРазбораXML)
	
	СтруктураРазбораXML.РазобранныеСтроки.Очистить();
	
КонецПроцедуры

Процедура ИнициализироватьПотокиШаблоннойСтроки(СтруктураРазбораXML)
	
	Если СтруктураРазбораXML.СтатусТэга1С = 1 ИЛИ СтруктураРазбораXML.СтатусТэга1С = 5 Тогда
		
		Если НЕ ПотокАктивен(СтруктураРазбораXML, "ФорматТекстаДо") Тогда
			ИнициализироватьЗаписьВПоток(СтруктураРазбораXML, "ФорматТекстаДо");
			ПеренестиЗаписьВПоток(СтруктураРазбораXML, СтруктураРазбораXML.ИмяПотокаФормата, "ФорматТекстаДо");
			ОстановитьЗаписьВПоток(СтруктураРазбораXML, "ФорматТекстаДо");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРазбораXML.СтатусТэга1С = 2 ИЛИ СтруктураРазбораXML.СтатусТэга1С = 6 Тогда
		
		Если НЕ ПотокАктивен(СтруктураРазбораXML, "ФорматТекстаДо") Тогда
			ИнициализироватьЗаписьВПоток(СтруктураРазбораXML, "ФорматТекстаДо");
			ПеренестиЗаписьВПоток(СтруктураРазбораXML, СтруктураРазбораXML.ИмяПотокаФормата, "ФорматТекстаДо");
			ОстановитьЗаписьВПоток(СтруктураРазбораXML, "ФорматТекстаДо");
		КонецЕсли;
		
		Если НЕ ПотокАктивен(СтруктураРазбораXML, "ФорматТэга1С") Тогда
			ИнициализироватьЗаписьВПоток(СтруктураРазбораXML, "ФорматТэга1С");
			ПеренестиЗаписьВПоток(СтруктураРазбораXML, СтруктураРазбораXML.ИмяПотокаФормата, "ФорматТэга1С");
			ОстановитьЗаписьВПоток(СтруктураРазбораXML, "ФорматТэга1С");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРазбораXML.СтатусТэга1С = 3 ИЛИ СтруктураРазбораXML.СтатусТэга1С = 7 Тогда
		
		Если НЕ ПотокАктивен(СтруктураРазбораXML, "ФорматТекстаДо") Тогда
			ИнициализироватьЗаписьВПоток(СтруктураРазбораXML, "ФорматТекстаДо");
			ПеренестиЗаписьВПоток(СтруктураРазбораXML, СтруктураРазбораXML.ИмяПотокаФормата, "ФорматТекстаДо");
			ОстановитьЗаписьВПоток(СтруктураРазбораXML, "ФорматТекстаДо");
		КонецЕсли;
		
		Если НЕ ПотокАктивен(СтруктураРазбораXML, "ФорматТэга1С") Тогда
			ИнициализироватьЗаписьВПоток(СтруктураРазбораXML, "ФорматТэга1С");
			ПеренестиЗаписьВПоток(СтруктураРазбораXML, СтруктураРазбораXML.ИмяПотокаФормата, "ФорматТэга1С");
			ОстановитьЗаписьВПоток(СтруктураРазбораXML, "ФорматТэга1С");
		КонецЕсли;
		
		Если НЕ ПотокАктивен(СтруктураРазбораXML, "ФорматТекстаПосле") Тогда
			ИнициализироватьЗаписьВПоток(СтруктураРазбораXML, "ФорматТекстаПосле");
			ПеренестиЗаписьВПоток(СтруктураРазбораXML, СтруктураРазбораXML.ИмяПотокаФормата, "ФорматТекстаПосле");
			ОстановитьЗаписьВПоток(СтруктураРазбораXML, "ФорматТекстаПосле");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СброситьПотокиШаблоннойСтроки(СтруктураРазбораXML)
	
	СброситьЗаписьВПоток(СтруктураРазбораXML, "ФорматТекстаДо");
	СброситьЗаписьВПоток(СтруктураРазбораXML, "ФорматТэга1С");
	СброситьЗаписьВПоток(СтруктураРазбораXML, "ФорматТекстаПосле");
	
КонецПроцедуры

Процедура РазбитьТекстШаблонаНаОбласти(ЧтениеXML, СтруктураДокумента, ПараметрыАнализа)
	
	УровеньТэгаБлок       = -1;
	УровеньТэгаОбласть    = -1;
	УровеньАбзаца         = "0";
	ТекущийУровень        = 0;
	ПропуститьТэг         = Ложь;
	ТекстРаздела          = "";
	
	СтруктураРазбораXML = ИнициализироватьРазборXML();
	
	СброситьСтатусыТэгов1С(СтруктураРазбораXML);
	
	ИнициализироватьЗаписьВПоток(СтруктураРазбораXML, "Заголовок", "");
	
	Если ПараметрыАнализа.ТипАнализа <> 1 Тогда
		ИнициализироватьЗаписьВПоток(СтруктураРазбораXML, "Блок", "");
		УровеньТэгаБлок = 0;
	КонецЕсли;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		// тег описания пространства имен во временном xml
		Если ЧтениеXML.Имя = "w:next" Тогда
			Продолжить;
		КонецЕсли;
		
		Если (ЧтениеXML.Имя = "w:bookmarkStart" ИЛИ ЧтениеXML.Имя = "w:bookmarkEnd") Тогда
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ПропуститьТэг = Истина;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				ПропуститьТэг = Ложь;
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ПропуститьТэг Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ТекущийУровень = ТекущийУровень + 1;
		КонецЕсли;
		
		Если ЧтениеНачалаРаздела(СтруктураРазбораXML, ЧтениеXML) Тогда
			СтруктураРазбораXML.БлокирующийПоток = "Раздел";
			ИнициализироватьЗаписьВПоток(СтруктураРазбораXML, "Раздел", "", Ложь);
			ПеренестиОткрывающиеТэгиЗаписиВПоток(СтруктураРазбораXML, "Заголовок", "Раздел", "w:body");
		КонецЕсли;
		
		Если ЧтениеНачалаЛюбогоБлокаКромеПараграфа(СтруктураРазбораXML, ЧтениеXML) И ТекущийУровень = УровеньТэгаБлок Тогда
			ИнициализироватьЗаписьВПоток(СтруктураРазбораXML, "Блок");
		КонецЕсли;
		
		Если ЧтениеНачалаПараграфа(СтруктураРазбораXML, ЧтениеXML) Тогда
			УровеньАбзаца = Формат(Число(УровеньАбзаца) + 1, "ЧН=0; ЧГ=0");
			СтруктураРазбораXML.ТекущийУровеньАбзаца = УровеньАбзаца;
			
			СброситьСтатусыТэгов1С(СтруктураРазбораXML, Истина);
			ИнициализироватьЗаписьВПоток(СтруктураРазбораXML, "Абзац" + УровеньАбзаца);
			ИнициализироватьЗаписьВПоток(СтруктураРазбораXML, "Строки" + УровеньАбзаца);
			ОстановитьЗаписьВПоток(СтруктураРазбораXML, "Строки" + УровеньАбзаца);
		КонецЕсли;
		
		Если ЧтениеКонцаПараграфа(СтруктураРазбораXML, ЧтениеXML) Тогда
			ВозобновитьЗаписьВПоток(СтруктураРазбораXML, "Абзац" + УровеньАбзаца);
		КонецЕсли;
		
		Если ЧтениеНачалаСтроки(СтруктураРазбораXML, ЧтениеXML) Тогда
			ВозобновитьЗаписьВПоток(СтруктураРазбораXML, "Строки" + УровеньАбзаца);
			ИнициализироватьЗаписьВПоток(СтруктураРазбораXML, "СтрокаПарам" + УровеньАбзаца);
			ОстановитьЗаписьВПоток(СтруктураРазбораXML, "Абзац" + УровеньАбзаца);
			СтруктураРазбораXML.ИмяПотокаФормата = "СтрокаПарам" + УровеньАбзаца;
		КонецЕсли;
		
		ЧтениеНачалаТекстаСтроки = ЧтениеНачалаТекстаСтроки(СтруктураРазбораXML, ЧтениеXML);
		
		ЗавершитьЗаписьВЗаголовок = ЧтениеНачалаТелаДокумента(СтруктураРазбораXML, ЧтениеXML) ИЛИ ЧтениеНачалаТелаКолонтитула(СтруктураРазбораXML, ЧтениеXML);
		
		ЗаписатьЭлементXMLВПоток(СтруктураРазбораXML, ЧтениеXML, СтруктураДокумента);
		
		Если ЧтениеНачалаТекстаСтроки Тогда
			ЗавершитьЗаписьВПоток(СтруктураРазбораXML, "СтрокаПарам" + УровеньАбзаца);
		КонецЕсли;
		
		Если ЗавершитьЗаписьВЗаголовок Тогда
			УровеньТэгаБлок    = СтруктураРазбораXML.ПотокиЗаписи.Заголовок.Уровень + 1;
			УровеньТэгаОбласть = СтруктураРазбораXML.ПотокиЗаписи.Заголовок.Уровень + 2;
			
			ЗавершитьЗаписьВПоток(СтруктураРазбораXML, "Заголовок");
		КонецЕсли;
		
		Если ЧтениеКонцаСтроки(СтруктураРазбораXML, ЧтениеXML) Тогда
			Если СтруктураРазбораXML.СтатусТэга1С = 0 И СтруктураРазбораXML.РазобранныеСтроки.Количество() = 0 Тогда
				ПеренестиЗаписьВПоток(СтруктураРазбораXML, "Строки" + УровеньАбзаца, "Абзац" + УровеньАбзаца);
			ИначеЕсли СтруктураРазбораXML.РазобранныеСтроки.Количество() > 0 Тогда
				ИнициализироватьЗаписьВПоток(СтруктураРазбораXML, "СтрокиПарам");
				
				КоличествоСтрок = 0;
				
				Для Каждого ЭлементСтроки Из СтруктураРазбораXML.РазобранныеСтроки Цикл
					
					Если ПараметрыАнализа.ТипАнализа = 1 И ТекущийУровень = УровеньТэгаОбласть И ЭлементСтроки.СтатусТэга1С = 3 И ПустаяСтрока(СтруктураРазбораXML.ИмяОбласти) Тогда
						
						СтруктураРазбораXML.ИмяОбласти = ЭлементСтроки.ИмяОбласти;
						СтруктураРазбораXML.СтатусОбласти = 0;
						КоличествоСтрок = 0;
						
						ИнициализироватьЗаписьВПоток(СтруктураРазбораXML, "Область", "");
						ПеренестиОткрывающиеТэгиЗаписиВПоток(СтруктураРазбораXML, "Заголовок", "Область", "w:body");
						ОстановитьЗаписьВПоток(СтруктураРазбораXML, "Область");
						СброситьЗаписьВПоток(СтруктураРазбораXML, "СтрокиПарам");
						ИнициализироватьЗаписьВПоток(СтруктураРазбораXML, "СтрокиПарам");
						
						Прервать;
						
					ИначеЕсли ПараметрыАнализа.ТипАнализа = 1 И ТекущийУровень = УровеньТэгаОбласть И ЭлементСтроки.СтатусТэга1С = 7 И СтруктураРазбораXML.ИмяОбласти = ЭлементСтроки.ИмяОбласти Тогда
						
						ТекстОбласти = ЗавершитьЗаписьВПоток(СтруктураРазбораXML, "Область");
						
						СтруктураОбласти = ОбластьДокумента();
						СтруктураОбласти.Имя          = СтруктураРазбораXML.ИмяОбласти;
						СтруктураОбласти.Текст        = ТекстОбласти;
						СтруктураОбласти.НомерРаздела = СтруктураРазбораXML.НомерРаздела;
						
						ДобавитьВСтруктуруДокументаОбластьДокумента(СтруктураДокумента, СтруктураОбласти);
						
						СтруктураРазбораXML.ИмяОбласти = "";
						СтруктураРазбораXML.СтатусОбласти = 0;
						
						Прервать;
						
					КонецЕсли;
					
					КоличествоСтрок = КоличествоСтрок + 1;
					
					ЗавершитьЗаписьВПоток(СтруктураРазбораXML, ЭлементСтроки.ПотокФормата);
					
					ИмеетсяАтрибутПробела = СтрНайти(СтруктураРазбораXML.ПотокиЗаписи[ЭлементСтроки.ПотокФормата].ТекстПотока, "w:t xml:space", НаправлениеПоиска.СКонца) > 0;
					
					ПеренестиОткрывающиеТэгиЗаписиВПоток(СтруктураРазбораXML, ЭлементСтроки.ПотокФормата, "СтрокиПарам", "w:t");
					
					Если НЕ ИмеетсяАтрибутПробела И (ПустаяСтрока(Лев(ЭлементСтроки.Текст, 1)) ИЛИ ПустаяСтрока(Прав(ЭлементСтроки.Текст, 1))) Тогда
						ДобавитьАтрибутВПоток(СтруктураРазбораXML, "СтрокиПарам", "xml:space", "preserve");
					КонецЕсли;
					ДобавитьТекстВПоток(СтруктураРазбораXML, "СтрокиПарам", ЭлементСтроки.Текст);
					ЗакрытьЭлементыВПотоке(СтруктураРазбораXML, "СтрокиПарам", 2);
					
				КонецЦикла;
				
				Если КоличествоСтрок > 0 Тогда
					ПеренестиЗаписьВПоток(СтруктураРазбораXML, "СтрокиПарам", "Абзац" + УровеньАбзаца);
				КонецЕсли;
				
				СброситьЗаписьВПоток(СтруктураРазбораXML, "СтрокиПарам");
				СброситьПотокиШаблоннойСтроки(СтруктураРазбораXML);
				ОчиститьРазобранныеСтроки(СтруктураРазбораXML);
			КонецЕсли;
			
			СброситьЗаписьВПоток(СтруктураРазбораXML, "СтрокаПарам" + УровеньАбзаца);
			
			Если СтруктураРазбораXML.СтатусТэга1С = 0 И СтруктураРазбораXML.РазобранныеСтроки.Количество() = 0 ИЛИ СтруктураРазбораXML.РазобранныеСтроки.Количество() > 0 Тогда
				СброситьЗаписьВПоток(СтруктураРазбораXML, "Строки" + УровеньАбзаца);
				ИнициализироватьЗаписьВПоток(СтруктураРазбораXML, "Строки" + УровеньАбзаца);
				ОстановитьЗаписьВПоток(СтруктураРазбораXML, "Строки" + УровеньАбзаца);
			КонецЕсли;
		КонецЕсли;
		
		Если ЧтениеКонцаПараграфа(СтруктураРазбораXML, ЧтениеXML) Тогда
			Если НЕ СтруктураРазбораXML.СтатусТэга1С = 0 Тогда
				СброситьСтатусыТэгов1С(СтруктураРазбораXML, Истина);
			КонецЕсли;
			
			Если Число(УровеньАбзаца) > 1 Тогда
				ПотокПереноса = "Строки" + Формат(Число(УровеньАбзаца) - 1, "ЧН=0; ЧГ=0");
			ИначеЕсли ТекущийУровень = УровеньТэгаБлок И ПараметрыАнализа.ТипАнализа = 1 Тогда
				ПотокПереноса = "Область";
			Иначе
				ПотокПереноса = "Блок";
			КонецЕсли;
			
			Если ПараметрыАнализа.ТипАнализа <> 1
				 ИЛИ НЕ ПустаяСтрока(СтруктураРазбораXML.ИмяОбласти) И СтруктураРазбораXML.СтатусОбласти = 1 Тогда
				ПеренестиЗаписьВПоток(СтруктураРазбораXML, "Абзац" + УровеньАбзаца, ПотокПереноса);
			КонецЕсли;
			
			СброситьЗаписьВПоток(СтруктураРазбораXML, "Абзац" + УровеньАбзаца);
			СброситьЗаписьВПоток(СтруктураРазбораXML, "Строки" + УровеньАбзаца);
			
			Если НЕ ПустаяСтрока(СтруктураРазбораXML.ИмяОбласти) И СтруктураРазбораXML.СтатусОбласти = 0 Тогда
				СтруктураРазбораXML.СтатусОбласти = 1;
			КонецЕсли;
			
			УровеньАбзаца = Формат(Число(УровеньАбзаца) - 1, "ЧН=0; ЧГ=0");
			СтруктураРазбораXML.ТекущийУровеньАбзаца = УровеньАбзаца;
			СтруктураРазбораXML.ИмяПотокаФормата = "СтрокаПарам" + УровеньАбзаца;
		КонецЕсли;
		
		Если ЧтениеКонцаЛюбогоБлокаКромеПараграфа(СтруктураРазбораXML, ЧтениеXML) И ТекущийУровень = УровеньТэгаБлок Тогда
			Если Не ПустаяСтрока(СтруктураРазбораXML.ИмяОбласти) И СтруктураРазбораXML.СтатусОбласти = 1 Тогда
				ПеренестиЗаписьВПоток(СтруктураРазбораXML, "Блок", "Область");
			КонецЕсли;
			СброситьЗаписьВПоток(СтруктураРазбораXML, "Блок");
		КонецЕсли;
		
		Если ЧтениеКонцаРаздела(СтруктураРазбораXML, ЧтениеXML) Тогда
			ТекстРаздела = ЗавершитьЗаписьВПоток(СтруктураРазбораXML, "Раздел");
			СтруктураРазбораXML.БлокирующийПоток = "";
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстРаздела) И ТекущийУровень = УровеньТэгаБлок Тогда
			Если СтруктураРазбораXML.СтатусОбласти = 0 Тогда
				СтруктураРаздела = ОбластьРаздела();
				СтруктураРаздела.Текст = ТекстРаздела;
				СтруктураРаздела.Номер = СтруктураРазбораXML.НомерРаздела;
				ДобавитьВСтруктуруДокументаРаздел(СтруктураДокумента, СтруктураРаздела);
				СтруктураРазбораXML.НомерРаздела = СтруктураРазбораXML.НомерРаздела + 1;
			КонецЕсли;
			ТекстРаздела = "";
		КонецЕсли;
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ТекущийУровень = ТекущийУровень - 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыАнализа.ТипАнализа = 2 ИЛИ ПараметрыАнализа.ТипАнализа = 3 Тогда
		ТекстОбласти = ЗавершитьЗаписьВПоток(СтруктураРазбораXML, "Блок");
		ПараметрыАнализа.СтруктураАнализа.Текст  = ТекстОбласти;
	КонецЕсли;
	
	Если ПараметрыАнализа.ТипАнализа = 1  Тогда
		ИнициализироватьЗаписьВПоток(СтруктураРазбораXML, "Абзац", "");
		ПеренестиОткрывающиеТэгиЗаписиВПоток(СтруктураРазбораXML, "Заголовок", "Абзац", "w:body");
		
		ТекстРазрыва = "<w:p w:rsidRDefault=""" + СтруктураДокумента.ИдентификаторДокумента + """ w:rsidR=""" + СтруктураДокумента.ИдентификаторДокумента + """></w:p>";
		СтруктураРазбораXML.ПотокиЗаписи.Абзац.Поток.ЗаписатьБезОбработки(ТекстРазрыва);
		
		ТекстОбласти = ЗавершитьЗаписьВПоток(СтруктураРазбораXML, "Абзац");
		
		СтруктураОбласти = ОбластьДокумента();
		СтруктураОбласти.Имя          = "Абзац";
		СтруктураОбласти.Текст        = ТекстОбласти;
		СтруктураОбласти.НомерРаздела = 0;
		ДобавитьВСтруктуруДокументаОбластьДокумента(СтруктураДокумента, СтруктураОбласти);
	КонецЕсли;
	
КонецПроцедуры

Процедура АнализироватьПараметрыВСтроке(Знач Строка, СтруктураРазбораXML)
	
	// 1 - начало тэга {v8
	// 2 - начало параметра тэга {v8
	// 3 - конец параметра тэга {v8
	
	// 5 - начало тэга {/v8
	// 6 - начало параметра тэга {/v8
	// 7 - конец параметра тэга {/v8
	
	ПризнакНачалаТэга1С = "{v8 ";
	ПризнакКонцаТэга1С  = "{/v8 ";
	
	ДлинаСтрокиТэга1С       = СтрДлина(СтруктураРазбораXML.ПолноеИмяТэга1С);
	ДлинаСтроки             = СтрДлина(Строка);
	
	Для ф = 1 По ДлинаСтроки Цикл
		
		Символ      = Сред(Строка, ф, 1);
		КодСимвола  = КодСимвола(Символ);
		
		Если Символ = "{" И (СтруктураРазбораXML.СтатусТэга1С = 3 ИЛИ СтруктураРазбораXML.СтатусТэга1С = 7) Тогда
			ИнициализироватьПотокиШаблоннойСтроки(СтруктураРазбораXML);
			СформироватьРазобранныеСтроки(СтруктураРазбораXML);
			ДлинаСтрокиТэга1С = 0;
		КонецЕсли;
		
		Если ДлинаСтрокиТэга1С + 1 <= СтрДлина(ПризнакНачалаТэга1С) И Лев(ПризнакНачалаТэга1С, ДлинаСтрокиТэга1С + 1) = СтруктураРазбораXML.ПолноеИмяТэга1С + Символ Тогда
			
			СтруктураРазбораXML.СтатусТэга1С = 1;
			СтруктураРазбораXML.ПолноеИмяТэга1С = СтруктураРазбораXML.ПолноеИмяТэга1С + Символ;
			ДлинаСтрокиТэга1С = ДлинаСтрокиТэга1С + 1;
			Продолжить;
			
		ИначеЕсли ДлинаСтрокиТэга1С <= СтрДлина(ПризнакКонцаТэга1С) И Лев(ПризнакКонцаТэга1С, ДлинаСтрокиТэга1С + 1) = СтруктураРазбораXML.ПолноеИмяТэга1С + Символ Тогда
			
			СтруктураРазбораXML.СтатусТэга1С = 5;
			СтруктураРазбораXML.ПолноеИмяТэга1С = СтруктураРазбораXML.ПолноеИмяТэга1С + Символ;
			ДлинаСтрокиТэга1С = ДлинаСтрокиТэга1С + 1;
			Продолжить;
			
		КонецЕсли;
		
		Если СтруктураРазбораXML.СтатусТэга1С = 0 И СтрНачинаетсяС(СтруктураРазбораXML.ПолноеИмяТэга1С, ПризнакНачалаТэга1С) Тогда
			СтруктураРазбораXML.СтатусТэга1С = 1;
		ИначеЕсли СтруктураРазбораXML.СтатусТэга1С = 0 И СтрНачинаетсяС(СтруктураРазбораXML.ПолноеИмяТэга1С, ПризнакКонцаТэга1С) Тогда
			СтруктураРазбораXML.СтатусТэга1С = 5;
		КонецЕсли;
		
		Если СтруктураРазбораXML.СтатусТэга1С = 1 И НЕ СтрНачинаетсяС(СтруктураРазбораXML.ПолноеИмяТэга1С, ПризнакНачалаТэга1С)
			 ИЛИ СтруктураРазбораXML.СтатусТэга1С = 5 И НЕ СтрНачинаетсяС(СтруктураРазбораXML.ПолноеИмяТэга1С, ПризнакКонцаТэга1С)
			 ИЛИ СтруктураРазбораXML.СтатусТэга1С = 5 И ПустаяСтрока(СтруктураРазбораXML.ИмяОбласти) Тогда
			Текст = СтруктураРазбораXML.ТекстДоТэга1С + СтруктураРазбораXML.ПолноеИмяТэга1С + СтруктураРазбораXML.ТекстПослеТэга1С;
			СброситьСтатусыТэгов1С(СтруктураРазбораXML);
			СтруктураРазбораXML.ТекстДоТэга1С = Текст;
			ДлинаСтрокиТэга1С = 0;
		КонецЕсли;
		
		Если СтруктураРазбораXML.СтатусТэга1С = 1 ИЛИ СтруктураРазбораXML.СтатусТэга1С = 5 Тогда
			СтруктураРазбораXML.СтатусТэга1С = СтруктураРазбораXML.СтатусТэга1С + 1;
		КонецЕсли;
		
		Если СтруктураРазбораXML.СтатусТэга1С = 2 ИЛИ СтруктураРазбораXML.СтатусТэга1С = 6 Тогда
			
			СтруктураРазбораXML.ПолноеИмяТэга1С = СтруктураРазбораXML.ПолноеИмяТэга1С + Символ;
			ДлинаСтрокиТэга1С = ДлинаСтрокиТэга1С + 1;
			
			Если(КодСимвола = 32 ИЛИ (КодСимвола >= 48 И КодСимвола <= 57) ИЛИ (КодСимвола >= 65 И КодСимвола <= 90) ИЛИ КодСимвола = 95 ИЛИ (КодСимвола >= 97 И КодСимвола <= 122) ИЛИ (КодСимвола >= 1040 И КодСимвола <= 1103)) Тогда
				СтруктураРазбораXML.ИмяТэга1С = СтруктураРазбораXML.ИмяТэга1С + Символ;
			ИначеЕсли Символ = "." И СтруктураРазбораXML.ТипТэга1С = 0 И СтруктураРазбораXML.ИмяТэга1С = "Область" Тогда
				СтруктураРазбораXML.ТипТэга1С = 1;
				СтруктураРазбораXML.ИмяТэга1С = "";
			ИначеЕсли Символ = "}" Тогда
				СтруктураРазбораXML.СтатусТэга1С = СтруктураРазбораXML.СтатусТэга1С + 1;
				СтруктураРазбораXML.ИмяТэга1С = СокрЛП(СтруктураРазбораXML.ИмяТэга1С);
			Иначе
				Текст = СтруктураРазбораXML.ТекстДоТэга1С + СтруктураРазбораXML.ПолноеИмяТэга1С + СтруктураРазбораXML.ТекстПослеТэга1С;
				СброситьСтатусыТэгов1С(СтруктураРазбораXML);
				СтруктураРазбораXML.ТекстДоТэга1С = Текст;
				ДлинаСтрокиТэга1С = 0;
			КонецЕсли;
			
		ИначеЕсли СтруктураРазбораXML.СтатусТэга1С = 3 ИЛИ СтруктураРазбораXML.СтатусТэга1С = 7 Тогда
			СтруктураРазбораXML.ТекстПослеТэга1С = СтруктураРазбораXML.ТекстПослеТэга1С + Символ;
		Иначе
			СтруктураРазбораXML.ТекстДоТэга1С = СтруктураРазбораXML.ТекстДоТэга1С + Символ;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураРазбораXML.СтатусТэга1С = 0 И СтруктураРазбораXML.РазобранныеСтроки.Количество() > 0 Тогда
		СтруктураРазбораXML.СтатусТэга1С = 3;
	КонецЕсли;
	
	Если СтруктураРазбораXML.СтатусТэга1С = 0 Тогда
		СброситьПотокиШаблоннойСтроки(СтруктураРазбораXML);
	Иначе
		ИнициализироватьПотокиШаблоннойСтроки(СтруктураРазбораXML);
	КонецЕсли;
	
	Если СтруктураРазбораXML.СтатусТэга1С = 3 ИЛИ СтруктураРазбораXML.СтатусТэга1С = 7 Тогда
		СформироватьРазобранныеСтроки(СтруктураРазбораXML);
	КонецЕсли;
	
	Если СтруктураРазбораXML.СтатусТэга1С = 0 И СтруктураРазбораXML.РазобранныеСтроки.Количество() = 0 Тогда
		СброситьСтатусыТэгов1С(СтруктураРазбораXML);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыделитьИзРазделаКолонтитулы(ЧтениеXML, СтруктураДокумента, Раздел)
	
	ТипыКолонтитулов = ТипыКолонтитулов();
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если НЕ (ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И (ЧтениеXML.Имя = "w:headerReference" ИЛИ ЧтениеXML.Имя = "w:footerReference")) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяТэга       = ЧтениеXML.Имя;
		Атрибут_wtype = ЧтениеXML.ПолучитьАтрибут("w:type");
		Атрибут_rid   = ЧтениеXML.ПолучитьАтрибут("r:id");
		
		НайденнаяСтрока = СтруктураДокумента.ТаблицаСвязейКонтента.Найти(Атрибут_rid);
		
		Если НайденнаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТипКолонтитула   = ТипыКолонтитулов.Получить(ИмяТэга + "_" + Атрибут_wtype);
		
		СтруктураКолонтитула = ОбластьКолонтитула();
		СтруктураКолонтитула.Имя          = ТипКолонтитула;
		СтруктураКолонтитула.ИмяВнутр     = СтрЗаменить(НайденнаяСтрока.ИмяРесурса, ".xml", "");
		СтруктураКолонтитула.НомерРаздела = Раздел.Номер;
		
		ДобавитьВСтруктуруДокументаКолонтитул(СтруктураДокумента, СтруктураКолонтитула, НайденнаяСтрока.ИмяРесурса);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьРазделДокумента(СтруктураДокумента, Раздел)
	
	ТипыКолонтитулов = ТипыКолонтитулов();
	
	ЧтениеXML = ИнициализироватьЧтениеXML(Раздел.Текст);
	ЗаписьXML = ИнициализироватьЗаписьXML("",,,Ложь);
	
	ПропуститьТэг = Ложь;
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ПропуститьТэг = Истина Тогда
			ПропуститьТэг = Ложь;
			Продолжить;
		КонецЕсли;
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И (ЧтениеXML.Имя = "w:document" ИЛИ ЧтениеXML.Имя = "w:body") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И (ЧтениеXML.Имя = "w:headerReference" ИЛИ ЧтениеXML.Имя = "w:footerReference") Тогда
			
			ИмяТэга = ЧтениеXML.Имя;
			ЗначениеАтрибута = ЧтениеXML.ПолучитьАтрибут("w:type");
			КлючКолонтитула = ИмяТэга + "_" + ЗначениеАтрибута;
			ТипКолонтитула = ТипыКолонтитулов.Получить(КлючКолонтитула);
			КлючВСтруктуреДокумента = ТипКолонтитула + "_" + Формат(Раздел.Номер, "ЧГ=0");
			КолонтитулВСтруктуре = СтруктураДокумента.Колонтитулы.Получить(КлючВСтруктуреДокумента);
			
			Если КолонтитулВСтруктуре.Текст = "" Тогда
				ПропуститьТэг = Истина;
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И (ЧтениеXML.Имя = "w:document" ИЛИ ЧтениеXML.Имя = "w:body") Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписатьЭлементXML(ЧтениеXML, ЗаписьXML);
		
	КонецЦикла;
	
	ТекстРаздела = ЗаписьXML.Закрыть();
	
	Возврат ТекстРаздела;
	
КонецФункции

#КонецОбласти

#Область ПростыеОперацииСДаннымиXML

Функция ИнициализироватьЗаписьXML(КорневойТэг, ПутьКФайлу = "", Кодировка = "UTF-8", ЗаписатьОбъявление = Истина)
	
	ЗаписьXML = Новый ЗаписьXML;
	Если ПустаяСтрока(ПутьКФайлу) Тогда
		ЗаписьXML.УстановитьСтроку(Кодировка);
	Иначе
		ЗаписьXML.ОткрытьФайл(ПутьКФайлу, Кодировка)
	КонецЕсли;
	
	Если ЗаписатьОбъявление Тогда
		ЗаписьXML.ЗаписатьБезОбработки("<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>");
	КонецЕсли;
	
	Если Не ПустаяСтрока(КорневойТэг) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента(КорневойТэг);
	КонецЕсли;
	
	Возврат ЗаписьXML;
	
КонецФункции

Функция ИнициализироватьЧтениеXML(ДанныеЧтения, ТипДанных = 0)
	
	ЧтениеXML = Новый ЧтениеXML;
	Если ТипДанных = 0 Тогда
		ЧтениеXML.УстановитьСтроку(ДанныеЧтения)
	Иначе
		ЧтениеXML.ОткрытьФайл(ДанныеЧтения);
	КонецЕсли;
	
	ЧтениеXML.ИгнорироватьПробелы = ЛОЖЬ;
	
	Возврат ЧтениеXML;
	
КонецФункции

Процедура ЗаписатьЭлементXML(ЧтениеXML, ЗаписьXML, Текст = Неопределено)
	
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.ИнструкцияОбработки Тогда
		
		ЗаписьXML.ЗаписатьИнструкциюОбработки(ЧтениеXML.Имя, ЧтениеXML.Значение);
		
	ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		
		ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
		
		Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
			
			ЗаписьXML.ЗаписатьНачалоАтрибута(ЧтениеXML.Имя);
			ЗаписьXML.ЗаписатьТекст(ЧтениеXML.Значение);
			ЗаписьXML.ЗаписатьКонецАтрибута();
			
		КонецЦикла;
		
	ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
		
		Если Текст = Неопределено Тогда
			ЗаписьXML.ЗаписатьТекст(ЧтениеXML.Значение);
		Иначе
			ЗаписьXML.ЗаписатьТекст(Текст);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСоСтруктуройДокумента

// Возвращаемое значение:
// 	Структура - структура документа:
//   * ИдентификаторДокумента - Строка -
//   * РасширенияКартинок - Массив -
//   * КаталогКартинок - Строка -
//   * ТаблицаСвязейКонтента - ТаблицаЗначений -
//   * СвязиКонтента - Строка -
//   * ТипыКонтента - Строка -
//   * ПрисоединенныеОбласти - Массив -
//   * Колонтитулы - Соответствие - :
//    ** Ключ - Строка - 
//    ** Значение - см. ОбластьКолонтитула
//   * Разделы - Соответствие -
//   * ОбластиДокумента - Соответствие -
Функция ИнициализироватьДокумент() 
	
	Результат = Новый Структура;
	Результат.Вставить("ОбластиДокумента",       Новый Соответствие);
	Результат.Вставить("Разделы",                Новый Соответствие);
	Результат.Вставить("Колонтитулы",            Новый Соответствие);
	Результат.Вставить("ПрисоединенныеОбласти",  Новый Массив);
	Результат.Вставить("ТипыКонтента",           "");
	Результат.Вставить("СвязиКонтента",          "");
	Результат.Вставить("ТаблицаСвязейКонтента",  Новый ТаблицаЗначений);
	Результат.Вставить("КаталогКартинок",        "");
	Результат.Вставить("РасширенияКартинок",     Новый Массив);
	Результат.Вставить("ИдентификаторДокумента", "");
	
	ОписаниеЧисла  = Новый ОписаниеТипов("Число");
	ОписаниеСтроки = Новый ОписаниеТипов("Строка");
	
	Результат.ТаблицаСвязейКонтента.Колонки.Добавить("ИмяРесурса",   ОписаниеСтроки);
	Результат.ТаблицаСвязейКонтента.Колонки.Добавить("ИдРесурса",    ОписаниеСтроки);
	Результат.ТаблицаСвязейКонтента.Колонки.Добавить("НомерРесурса", ОписаниеЧисла);
	
	Возврат Результат;
	
КонецФункции

Функция ОбластьРаздела()
	
	Результат = Новый Структура;
	Результат.Вставить("Колонтитулы", Новый Соответствие);
	Результат.Вставить("Текст",       "");
	Результат.Вставить("Номер",       1);
	
	Возврат Результат;
	
КонецФункции

Функция ОбластьДокумента()
	
	Результат = Новый Структура;
	Результат.Вставить("Имя",          "");
	Результат.Вставить("Текст",        "");
	Результат.Вставить("НомерРаздела", 1);
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
// 	Структура - :
//   * НомерРаздела - Число -
//   * Текст - Строка -
//   * ИмяВнутр - Строка -
//   * Имя - Строка -
Функция ОбластьКолонтитула()
	
	Результат = Новый Структура;
	Результат.Вставить("Имя",          "");
	Результат.Вставить("ИмяВнутр",     "");
	Результат.Вставить("Текст",        "");
	Результат.Вставить("НомерРаздела", 1);
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьВСтруктуруДокументаРаздел(СтруктураДокумента, Раздел)
	
	СтруктураРаздела = ОбластьРаздела();
	ЗаполнитьЗначенияСвойств(СтруктураРаздела, Раздел);
	СтруктураДокумента.Разделы.Вставить(СтруктураРаздела.Номер, СтруктураРаздела);
	Возврат СтруктураРаздела;
	
КонецФункции

Функция ДобавитьВСтруктуруДокументаОбластьДокумента(СтруктураДокумента, Область)
	
	СтруктураОбласти = ОбластьДокумента();
	ЗаполнитьЗначенияСвойств(СтруктураОбласти, Область);
	СтруктураДокумента.ОбластиДокумента.Вставить(СтруктураОбласти.Имя, СтруктураОбласти);
	Возврат СтруктураОбласти;
	
КонецФункции

Функция ДобавитьВСтруктуруДокументаКолонтитул(СтруктураДокумента, Колонтитул, Знач КлючКолонтитула = "")
	
	Раздел = СтруктураДокумента.Разделы.Получить(Колонтитул.НомерРаздела);
	
	Если Раздел = Неопределено Тогда
		Колонтитул.Вставить("Номер", Колонтитул.НомерРаздела);
		Раздел = ДобавитьВСтруктуруДокументаРаздел(СтруктураДокумента, Колонтитул);
	КонецЕсли;
	
	СтруктураКолонтитула = ОбластьКолонтитула();
	ЗаполнитьЗначенияСвойств(СтруктураКолонтитула, Колонтитул);
	
	Если ПустаяСтрока(КлючКолонтитула) Тогда
		КлючКолонтитула = СтруктураКолонтитула.Имя + "_" + Формат(СтруктураКолонтитула.НомерРаздела, "ЧГ=0");
	КонецЕсли;
	
	СтруктураДокумента.Колонтитулы.Вставить(КлючКолонтитула, СтруктураКолонтитула);
	
	Возврат СтруктураКолонтитула;
	
КонецФункции

Функция ПрисоединитьКСтруктуреДокументаОбластьДокумента(СтруктураДокумента, Область)
	
	СтруктураОбласти = ОбластьДокумента();
	ЗаполнитьЗначенияСвойств(СтруктураОбласти, Область);
	
	СтруктураДокумента.ПрисоединенныеОбласти.Добавить(СтруктураОбласти);
	
	Возврат СтруктураОбласти;
	
КонецФункции

Функция ПрисоединитьКСтруктуреДокументаКолонтитул(СтруктураДокумента, Колонтитул)
	
	СтруктураКолонтитула = ОбластьКолонтитула();
	ЗаполнитьЗначенияСвойств(СтруктураКолонтитула, Колонтитул);
	
	Раздел = СтруктураДокумента.Разделы.Получить(СтруктураКолонтитула.НомерРаздела);
	
	Если Раздел = Неопределено Тогда
		СтруктураКолонтитула.Вставить("НомерРаздела", 1);
		Раздел = СтруктураДокумента.Разделы.Получить(1);
	КонецЕсли;
	
	КлючКолонтитула = СтруктураКолонтитула.Имя + "_" + Формат(СтруктураКолонтитула.НомерРаздела, "ЧГ=0");
	Раздел.Колонтитулы.Вставить(КлючКолонтитула, СтруктураКолонтитула);
	Возврат СтруктураКолонтитула;
	
КонецФункции

Функция ПолучитьИзСтруктурыДокументаОбластьДокумента(СтруктураДокумента, ИмяОбласти)
	
	Возврат СтруктураДокумента.ОбластиДокумента.Получить(ИмяОбласти);
	
КонецФункции

Функция ПолучитьИзСтруктурыДокументаКолонтитул(СтруктураДокумента, ИмяКолонтитула, НомерРаздела = 1)
	
	КлючКолонтитула = ИмяКолонтитула + "_" + Формат(НомерРаздела, "ЧГ=0");
	Возврат СтруктураДокумента.Колонтитулы.Получить(КлючКолонтитула);
	
КонецФункции

Процедура ДобавитьСтрокуВТаблицуСвязейКонтента(СтруктураДокумента, ИмяРесурса, ИдРесурса, НомерРесурса)
	
	НоваяСтрока = СтруктураДокумента.ТаблицаСвязейКонтента.Добавить();
	НоваяСтрока.ИмяРесурса   = ИмяРесурса;
	НоваяСтрока.ИдРесурса    = ИдРесурса;
	НоваяСтрока.НомерРесурса = НомерРесурса;
	
КонецПроцедуры

#КонецОбласти
